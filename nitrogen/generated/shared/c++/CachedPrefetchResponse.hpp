///
/// CachedPrefetchResponse.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <unordered_map>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::nitrofetch {

  /**
   * A struct which can be represented as a JavaScript object (CachedPrefetchResponse).
   */
  struct CachedPrefetchResponse {
  public:
    std::string url     SWIFT_PRIVATE;
    double statusCode     SWIFT_PRIVATE;
    std::string statusText     SWIFT_PRIVATE;
    std::unordered_map<std::string, std::string> headers     SWIFT_PRIVATE;
    std::shared_ptr<ArrayBuffer> body     SWIFT_PRIVATE;
    double timestampMs     SWIFT_PRIVATE;

  public:
    CachedPrefetchResponse() = default;
    explicit CachedPrefetchResponse(std::string url, double statusCode, std::string statusText, std::unordered_map<std::string, std::string> headers, std::shared_ptr<ArrayBuffer> body, double timestampMs): url(url), statusCode(statusCode), statusText(statusText), headers(headers), body(body), timestampMs(timestampMs) {}
  };

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ CachedPrefetchResponse <> JS CachedPrefetchResponse (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::CachedPrefetchResponse> final {
    static inline margelo::nitro::nitrofetch::CachedPrefetchResponse fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrofetch::CachedPrefetchResponse(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "url")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "statusCode")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "statusText")),
        JSIConverter<std::unordered_map<std::string, std::string>>::fromJSI(runtime, obj.getProperty(runtime, "headers")),
        JSIConverter<std::shared_ptr<ArrayBuffer>>::fromJSI(runtime, obj.getProperty(runtime, "body")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "timestampMs"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrofetch::CachedPrefetchResponse& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "url", JSIConverter<std::string>::toJSI(runtime, arg.url));
      obj.setProperty(runtime, "statusCode", JSIConverter<double>::toJSI(runtime, arg.statusCode));
      obj.setProperty(runtime, "statusText", JSIConverter<std::string>::toJSI(runtime, arg.statusText));
      obj.setProperty(runtime, "headers", JSIConverter<std::unordered_map<std::string, std::string>>::toJSI(runtime, arg.headers));
      obj.setProperty(runtime, "body", JSIConverter<std::shared_ptr<ArrayBuffer>>::toJSI(runtime, arg.body));
      obj.setProperty(runtime, "timestampMs", JSIConverter<double>::toJSI(runtime, arg.timestampMs));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "url"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "statusCode"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "statusText"))) return false;
      if (!JSIConverter<std::unordered_map<std::string, std::string>>::canConvert(runtime, obj.getProperty(runtime, "headers"))) return false;
      if (!JSIConverter<std::shared_ptr<ArrayBuffer>>::canConvert(runtime, obj.getProperty(runtime, "body"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "timestampMs"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
