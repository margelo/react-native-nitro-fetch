///
/// NitroFetch-Swift-Cxx-Umbrella.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `HttpHeader` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct HttpHeader; }
// Forward declaration of `HybridCallbackExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridCallbackExceptionSpec; }
// Forward declaration of `HybridCronetEngineSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridCronetEngineSpec; }
// Forward declaration of `HybridCronetExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridCronetExceptionSpec; }
// Forward declaration of `HybridInlineExecutionProhibitedExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridInlineExecutionProhibitedExceptionSpec; }
// Forward declaration of `HybridNetworkExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridNetworkExceptionSpec; }
// Forward declaration of `HybridNitroCronetSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridNitroCronetSpec; }
// Forward declaration of `HybridQuicExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridQuicExceptionSpec; }
// Forward declaration of `HybridUrlRequestBuilderSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestBuilderSpec; }
// Forward declaration of `HybridUrlRequestSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestSpec; }
// Forward declaration of `UrlRequestCallback` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlRequestCallback; }
// Forward declaration of `UrlResponseInfo` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlResponseInfo; }

// Include C++ defined types
#include "HttpHeader.hpp"
#include "HybridCallbackExceptionSpec.hpp"
#include "HybridCronetEngineSpec.hpp"
#include "HybridCronetExceptionSpec.hpp"
#include "HybridInlineExecutionProhibitedExceptionSpec.hpp"
#include "HybridNetworkExceptionSpec.hpp"
#include "HybridNitroCronetSpec.hpp"
#include "HybridQuicExceptionSpec.hpp"
#include "HybridUrlRequestBuilderSpec.hpp"
#include "HybridUrlRequestSpec.hpp"
#include "UrlRequestCallback.hpp"
#include "UrlResponseInfo.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <unordered_map>
#include <vector>

// C++ helpers for Swift
#include "NitroFetch-Swift-Cxx-Bridge.hpp"

// Common C++ types used in Swift
#include <NitroModules/ArrayBufferHolder.hpp>
#include <NitroModules/AnyMapUtils.hpp>
#include <NitroModules/RuntimeError.hpp>
#include <NitroModules/DateToChronoDate.hpp>

// Forward declarations of Swift defined types
// Forward declaration of `HybridCallbackExceptionSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridCallbackExceptionSpec_cxx; }
// Forward declaration of `HybridCronetEngineSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridCronetEngineSpec_cxx; }
// Forward declaration of `HybridCronetExceptionSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridCronetExceptionSpec_cxx; }
// Forward declaration of `HybridInlineExecutionProhibitedExceptionSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridInlineExecutionProhibitedExceptionSpec_cxx; }
// Forward declaration of `HybridNetworkExceptionSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridNetworkExceptionSpec_cxx; }
// Forward declaration of `HybridNitroCronetSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridNitroCronetSpec_cxx; }
// Forward declaration of `HybridQuicExceptionSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridQuicExceptionSpec_cxx; }
// Forward declaration of `HybridUrlRequestBuilderSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridUrlRequestBuilderSpec_cxx; }
// Forward declaration of `HybridUrlRequestSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridUrlRequestSpec_cxx; }

// Include Swift defined types
#if __has_include("NitroFetch-Swift.h")
// This header is generated by Xcode/Swift on every app build.
// If it cannot be found, make sure the Swift module's name (= podspec name) is actually "NitroFetch".
#include "NitroFetch-Swift.h"
// Same as above, but used when building with frameworks (`use_frameworks`)
#elif __has_include(<NitroFetch/NitroFetch-Swift.h>)
#include <NitroFetch/NitroFetch-Swift.h>
#else
#error NitroFetch's autogenerated Swift header cannot be found! Make sure the Swift module's name (= podspec name) is actually "NitroFetch", and try building the app first.
#endif
