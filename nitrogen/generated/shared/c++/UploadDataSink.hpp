///
/// UploadDataSink.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <functional>
#include <string>

namespace margelo::nitro::nitrofetch {

  /**
   * A struct which can be represented as a JavaScript object (UploadDataSink).
   */
  struct UploadDataSink {
  public:
    std::function<void(bool /* finalChunk */)> onReadSucceeded     SWIFT_PRIVATE;
    std::function<void(const std::string& /* error */)> onReadError     SWIFT_PRIVATE;
    std::function<void()> onRewindSucceeded     SWIFT_PRIVATE;
    std::function<void(const std::string& /* error */)> onRewindError     SWIFT_PRIVATE;

  public:
    UploadDataSink() = default;
    explicit UploadDataSink(std::function<void(bool /* finalChunk */)> onReadSucceeded, std::function<void(const std::string& /* error */)> onReadError, std::function<void()> onRewindSucceeded, std::function<void(const std::string& /* error */)> onRewindError): onReadSucceeded(onReadSucceeded), onReadError(onReadError), onRewindSucceeded(onRewindSucceeded), onRewindError(onRewindError) {}
  };

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ UploadDataSink <> JS UploadDataSink (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::UploadDataSink> final {
    static inline margelo::nitro::nitrofetch::UploadDataSink fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrofetch::UploadDataSink(
        JSIConverter<std::function<void(bool)>>::fromJSI(runtime, obj.getProperty(runtime, "onReadSucceeded")),
        JSIConverter<std::function<void(const std::string&)>>::fromJSI(runtime, obj.getProperty(runtime, "onReadError")),
        JSIConverter<std::function<void()>>::fromJSI(runtime, obj.getProperty(runtime, "onRewindSucceeded")),
        JSIConverter<std::function<void(const std::string&)>>::fromJSI(runtime, obj.getProperty(runtime, "onRewindError"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrofetch::UploadDataSink& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "onReadSucceeded", JSIConverter<std::function<void(bool)>>::toJSI(runtime, arg.onReadSucceeded));
      obj.setProperty(runtime, "onReadError", JSIConverter<std::function<void(const std::string&)>>::toJSI(runtime, arg.onReadError));
      obj.setProperty(runtime, "onRewindSucceeded", JSIConverter<std::function<void()>>::toJSI(runtime, arg.onRewindSucceeded));
      obj.setProperty(runtime, "onRewindError", JSIConverter<std::function<void(const std::string&)>>::toJSI(runtime, arg.onRewindError));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::function<void(bool)>>::canConvert(runtime, obj.getProperty(runtime, "onReadSucceeded"))) return false;
      if (!JSIConverter<std::function<void(const std::string&)>>::canConvert(runtime, obj.getProperty(runtime, "onReadError"))) return false;
      if (!JSIConverter<std::function<void()>>::canConvert(runtime, obj.getProperty(runtime, "onRewindSucceeded"))) return false;
      if (!JSIConverter<std::function<void(const std::string&)>>::canConvert(runtime, obj.getProperty(runtime, "onRewindError"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
