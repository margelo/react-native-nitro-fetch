///
/// HybridNitroCronetSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridUrlRequestBuilderSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestBuilderSpec; }
// Forward declaration of `CachedFetchResponse` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct CachedFetchResponse; }

#include <memory>
#include "HybridUrlRequestBuilderSpec.hpp"
#include <string>
#include <NitroModules/Promise.hpp>
#include <unordered_map>
#include <NitroModules/ArrayBuffer.hpp>
#include <variant>
#include <optional>
#include "CachedFetchResponse.hpp"

namespace margelo::nitro::nitrofetch {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroCronet`
   * Inherit this class to create instances of `HybridNitroCronetSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroCronet: public HybridNitroCronetSpec {
   * public:
   *   HybridNitroCronet(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroCronetSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroCronetSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroCronetSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<HybridUrlRequestBuilderSpec> newUrlRequestBuilder(const std::string& url) = 0;
      virtual std::shared_ptr<Promise<void>> prefetch(const std::string& url, const std::string& httpMethod, const std::unordered_map<std::string, std::string>& headers, const std::optional<std::variant<std::shared_ptr<ArrayBuffer>, std::string>>& body, double maxAge) = 0;
      virtual std::shared_ptr<Promise<std::optional<CachedFetchResponse>>> consumeNativePrefetch(const std::string& prefetchKey) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroCronet";
  };

} // namespace margelo::nitro::nitrofetch
