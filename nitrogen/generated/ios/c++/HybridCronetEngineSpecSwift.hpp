///
/// HybridCronetEngineSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridCronetEngineSpec.hpp"

// Forward declaration of `HybridCronetEngineSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridCronetEngineSpec_cxx; }

// Forward declaration of `HybridUrlRequestBuilderSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestBuilderSpec; }
// Forward declaration of `UrlRequestCallback` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlRequestCallback; }
// Forward declaration of `UrlResponseInfo` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlResponseInfo; }
// Forward declaration of `HttpHeader` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct HttpHeader; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `HybridCronetExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridCronetExceptionSpec; }

#include <memory>
#include "HybridUrlRequestBuilderSpec.hpp"
#include <string>
#include "UrlRequestCallback.hpp"
#include "UrlResponseInfo.hpp"
#include <functional>
#include <unordered_map>
#include "HttpHeader.hpp"
#include <vector>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <optional>
#include "HybridCronetExceptionSpec.hpp"

#include "NitroFetch-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrofetch {

  /**
   * The C++ part of HybridCronetEngineSpec_cxx.swift.
   *
   * HybridCronetEngineSpecSwift (C++) accesses HybridCronetEngineSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridCronetEngineSpec_cxx can directly inherit from the C++ class HybridCronetEngineSpec
   * to simplify the whole structure and memory management.
   */
  class HybridCronetEngineSpecSwift: public virtual HybridCronetEngineSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridCronetEngineSpecSwift(const NitroFetch::HybridCronetEngineSpec_cxx& swiftPart):
      HybridObject(HybridCronetEngineSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroFetch::HybridCronetEngineSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<HybridUrlRequestBuilderSpec> newUrlRequestBuilder(const std::string& url, const UrlRequestCallback& callback) override {
      auto __result = _swiftPart.newUrlRequestBuilder(url, std::forward<decltype(callback)>(callback));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void shutdown() override {
      auto __result = _swiftPart.shutdown();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::string getVersionString() override {
      auto __result = _swiftPart.getVersionString();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void startNetLogToFile(const std::string& fileName, bool logAll) override {
      auto __result = _swiftPart.startNetLogToFile(fileName, std::forward<decltype(logAll)>(logAll));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void stopNetLog() override {
      auto __result = _swiftPart.stopNetLog();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroFetch::HybridCronetEngineSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrofetch
