///
/// JUrlResponseInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "UrlResponseInfo.hpp"

#include "HttpHeader.hpp"
#include "JHttpHeader.hpp"
#include <string>
#include <unordered_map>
#include <vector>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "UrlResponseInfo" and the the Kotlin data class "UrlResponseInfo".
   */
  struct JUrlResponseInfo final: public jni::JavaClass<JUrlResponseInfo> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/UrlResponseInfo;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct UrlResponseInfo by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    UrlResponseInfo toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldUrl = clazz->getField<jni::JString>("url");
      jni::local_ref<jni::JString> url = this->getFieldValue(fieldUrl);
      static const auto fieldHttpStatusCode = clazz->getField<double>("httpStatusCode");
      double httpStatusCode = this->getFieldValue(fieldHttpStatusCode);
      static const auto fieldHttpStatusText = clazz->getField<jni::JString>("httpStatusText");
      jni::local_ref<jni::JString> httpStatusText = this->getFieldValue(fieldHttpStatusText);
      static const auto fieldAllHeaders = clazz->getField<jni::JMap<jni::JString, jni::JString>>("allHeaders");
      jni::local_ref<jni::JMap<jni::JString, jni::JString>> allHeaders = this->getFieldValue(fieldAllHeaders);
      static const auto fieldAllHeadersAsList = clazz->getField<jni::JArrayClass<JHttpHeader>>("allHeadersAsList");
      jni::local_ref<jni::JArrayClass<JHttpHeader>> allHeadersAsList = this->getFieldValue(fieldAllHeadersAsList);
      static const auto fieldUrlChain = clazz->getField<jni::JArrayClass<jni::JString>>("urlChain");
      jni::local_ref<jni::JArrayClass<jni::JString>> urlChain = this->getFieldValue(fieldUrlChain);
      static const auto fieldNegotiatedProtocol = clazz->getField<jni::JString>("negotiatedProtocol");
      jni::local_ref<jni::JString> negotiatedProtocol = this->getFieldValue(fieldNegotiatedProtocol);
      static const auto fieldProxyServer = clazz->getField<jni::JString>("proxyServer");
      jni::local_ref<jni::JString> proxyServer = this->getFieldValue(fieldProxyServer);
      static const auto fieldReceivedByteCount = clazz->getField<double>("receivedByteCount");
      double receivedByteCount = this->getFieldValue(fieldReceivedByteCount);
      static const auto fieldWasCached = clazz->getField<jboolean>("wasCached");
      jboolean wasCached = this->getFieldValue(fieldWasCached);
      return UrlResponseInfo(
        url->toStdString(),
        httpStatusCode,
        httpStatusText->toStdString(),
        [&]() {
          std::unordered_map<std::string, std::string> __map;
          __map.reserve(allHeaders->size());
          for (const auto& __entry : *allHeaders) {
            __map.emplace(__entry.first->toStdString(), __entry.second->toStdString());
          }
          return __map;
        }(),
        [&]() {
          size_t __size = allHeadersAsList->size();
          std::vector<HttpHeader> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = allHeadersAsList->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }(),
        [&]() {
          size_t __size = urlChain->size();
          std::vector<std::string> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = urlChain->getElement(__i);
            __vector.push_back(__element->toStdString());
          }
          return __vector;
        }(),
        negotiatedProtocol->toStdString(),
        proxyServer->toStdString(),
        receivedByteCount,
        static_cast<bool>(wasCached)
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JUrlResponseInfo::javaobject> fromCpp(const UrlResponseInfo& value) {
      using JSignature = JUrlResponseInfo(jni::alias_ref<jni::JString>, double, jni::alias_ref<jni::JString>, jni::alias_ref<jni::JMap<jni::JString, jni::JString>>, jni::alias_ref<jni::JArrayClass<JHttpHeader>>, jni::alias_ref<jni::JArrayClass<jni::JString>>, jni::alias_ref<jni::JString>, jni::alias_ref<jni::JString>, double, jboolean);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        jni::make_jstring(value.url),
        value.httpStatusCode,
        jni::make_jstring(value.httpStatusText),
        [&]() -> jni::local_ref<jni::JMap<jni::JString, jni::JString>> {
          auto __map = jni::JHashMap<jni::JString, jni::JString>::create(value.allHeaders.size());
          for (const auto& __entry : value.allHeaders) {
            __map->put(jni::make_jstring(__entry.first), jni::make_jstring(__entry.second));
          }
          return __map;
        }(),
        [&]() {
          size_t __size = value.allHeadersAsList.size();
          jni::local_ref<jni::JArrayClass<JHttpHeader>> __array = jni::JArrayClass<JHttpHeader>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.allHeadersAsList[__i];
            __array->setElement(__i, *JHttpHeader::fromCpp(__element));
          }
          return __array;
        }(),
        [&]() {
          size_t __size = value.urlChain.size();
          jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.urlChain[__i];
            __array->setElement(__i, *jni::make_jstring(__element));
          }
          return __array;
        }(),
        jni::make_jstring(value.negotiatedProtocol),
        jni::make_jstring(value.proxyServer),
        value.receivedByteCount,
        value.wasCached
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
