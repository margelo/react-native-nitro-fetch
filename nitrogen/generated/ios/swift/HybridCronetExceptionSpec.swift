///
/// HybridCronetExceptionSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCronetExceptionSpec``
public protocol HybridCronetExceptionSpec_protocol: HybridObject {
  // Properties
  var message: String { get }
  var internalErrorCode: Double { get }

  // Methods
  
}

/// See ``HybridCronetExceptionSpec``
open class HybridCronetExceptionSpec_base {
  private weak var cxxWrapper: HybridCronetExceptionSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridCronetExceptionSpec_cxx {
  #if DEBUG
    guard self is HybridCronetExceptionSpec else {
      fatalError("`self` is not a `HybridCronetExceptionSpec`! Did you accidentally inherit from `HybridCronetExceptionSpec_base` instead of `HybridCronetExceptionSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCronetExceptionSpec_cxx(self as! HybridCronetExceptionSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the CronetException HybridObject.
 * Implement this protocol to create Swift-based instances of CronetException.
 * ```swift
 * class HybridCronetException : HybridCronetExceptionSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCronetExceptionSpec = HybridCronetExceptionSpec_protocol & HybridCronetExceptionSpec_base
