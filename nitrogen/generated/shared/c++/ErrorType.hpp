///
/// ErrorType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrofetch {

  /**
   * An enum which can be represented as a JavaScript union (ErrorType).
   */
  enum class ErrorType {
    NETWORK      SWIFT_NAME(network) = 0,
    QUIC      SWIFT_NAME(quic) = 1,
    CALLBACK      SWIFT_NAME(callback) = 2,
    SECURITY      SWIFT_NAME(security) = 3,
    CRONET      SWIFT_NAME(cronet) = 4,
    INLINEEXECUTION      SWIFT_NAME(inlineexecution) = 5,
    URLSESSION      SWIFT_NAME(urlsession) = 6,
    OTHER      SWIFT_NAME(other) = 7,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ ErrorType <> JS ErrorType (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::ErrorType> final {
    static inline margelo::nitro::nitrofetch::ErrorType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("network"): return margelo::nitro::nitrofetch::ErrorType::NETWORK;
        case hashString("quic"): return margelo::nitro::nitrofetch::ErrorType::QUIC;
        case hashString("callback"): return margelo::nitro::nitrofetch::ErrorType::CALLBACK;
        case hashString("security"): return margelo::nitro::nitrofetch::ErrorType::SECURITY;
        case hashString("cronet"): return margelo::nitro::nitrofetch::ErrorType::CRONET;
        case hashString("inlineExecution"): return margelo::nitro::nitrofetch::ErrorType::INLINEEXECUTION;
        case hashString("urlSession"): return margelo::nitro::nitrofetch::ErrorType::URLSESSION;
        case hashString("other"): return margelo::nitro::nitrofetch::ErrorType::OTHER;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum ErrorType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrofetch::ErrorType arg) {
      switch (arg) {
        case margelo::nitro::nitrofetch::ErrorType::NETWORK: return JSIConverter<std::string>::toJSI(runtime, "network");
        case margelo::nitro::nitrofetch::ErrorType::QUIC: return JSIConverter<std::string>::toJSI(runtime, "quic");
        case margelo::nitro::nitrofetch::ErrorType::CALLBACK: return JSIConverter<std::string>::toJSI(runtime, "callback");
        case margelo::nitro::nitrofetch::ErrorType::SECURITY: return JSIConverter<std::string>::toJSI(runtime, "security");
        case margelo::nitro::nitrofetch::ErrorType::CRONET: return JSIConverter<std::string>::toJSI(runtime, "cronet");
        case margelo::nitro::nitrofetch::ErrorType::INLINEEXECUTION: return JSIConverter<std::string>::toJSI(runtime, "inlineExecution");
        case margelo::nitro::nitrofetch::ErrorType::URLSESSION: return JSIConverter<std::string>::toJSI(runtime, "urlSession");
        case margelo::nitro::nitrofetch::ErrorType::OTHER: return JSIConverter<std::string>::toJSI(runtime, "other");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert ErrorType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("network"):
        case hashString("quic"):
        case hashString("callback"):
        case hashString("security"):
        case hashString("cronet"):
        case hashString("inlineExecution"):
        case hashString("urlSession"):
        case hashString("other"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
