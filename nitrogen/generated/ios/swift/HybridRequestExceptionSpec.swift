///
/// HybridRequestExceptionSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridRequestExceptionSpec``
public protocol HybridRequestExceptionSpec_protocol: HybridObject {
  // Properties
  var platform: ExceptionPlatform { get }
  var message: String { get }
  var code: Double { get }
  var errorType: ErrorType { get }
  var internalErrorCode: Double? { get }
  var networkErrorCode: Double? { get }
  var quicErrorCode: Double? { get }
  var stackTrace: String? { get }
  var errorDomain: Double? { get }
  var localizedDescription: String? { get }
  var underlyingError: String? { get }
  var failingURL: String? { get }
  var causeMessage: String? { get }

  // Methods
  
}

/// See ``HybridRequestExceptionSpec``
open class HybridRequestExceptionSpec_base {
  private weak var cxxWrapper: HybridRequestExceptionSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridRequestExceptionSpec_cxx {
  #if DEBUG
    guard self is HybridRequestExceptionSpec else {
      fatalError("`self` is not a `HybridRequestExceptionSpec`! Did you accidentally inherit from `HybridRequestExceptionSpec_base` instead of `HybridRequestExceptionSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridRequestExceptionSpec_cxx(self as! HybridRequestExceptionSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the RequestException HybridObject.
 * Implement this protocol to create Swift-based instances of RequestException.
 * ```swift
 * class HybridRequestException : HybridRequestExceptionSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridRequestExceptionSpec = HybridRequestExceptionSpec_protocol & HybridRequestExceptionSpec_base
