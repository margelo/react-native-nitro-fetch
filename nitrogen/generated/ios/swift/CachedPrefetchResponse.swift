///
/// CachedPrefetchResponse.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `CachedPrefetchResponse`, backed by a C++ struct.
 */
public typealias CachedPrefetchResponse = margelo.nitro.nitrofetch.CachedPrefetchResponse

public extension CachedPrefetchResponse {
  private typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Create a new instance of `CachedPrefetchResponse`.
   */
  init(url: String, statusCode: Double, statusText: String, headers: Dictionary<String, String>, body: ArrayBuffer, timestampMs: Double) {
    self.init(std.string(url), statusCode, std.string(statusText), { () -> bridge.std__unordered_map_std__string__std__string_ in
      var __map = bridge.create_std__unordered_map_std__string__std__string_(headers.count)
      for (__k, __v) in headers {
        bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
      }
      return __map
    }(), body.getArrayBuffer(), timestampMs)
  }

  var url: String {
    @inline(__always)
    get {
      return String(self.__url)
    }
    @inline(__always)
    set {
      self.__url = std.string(newValue)
    }
  }
  
  var statusCode: Double {
    @inline(__always)
    get {
      return self.__statusCode
    }
    @inline(__always)
    set {
      self.__statusCode = newValue
    }
  }
  
  var statusText: String {
    @inline(__always)
    get {
      return String(self.__statusText)
    }
    @inline(__always)
    set {
      self.__statusText = std.string(newValue)
    }
  }
  
  var headers: Dictionary<String, String> {
    @inline(__always)
    get {
      return { () -> Dictionary<String, String> in
        var __dictionary = Dictionary<String, String>(minimumCapacity: self.__headers.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__string__keys(self.__headers)
        for __key in __keys {
          let __value = bridge.get_std__unordered_map_std__string__std__string__value(self.__headers, __key)
          __dictionary[String(__key)] = String(__value)
        }
        return __dictionary
      }()
    }
    @inline(__always)
    set {
      self.__headers = { () -> bridge.std__unordered_map_std__string__std__string_ in
        var __map = bridge.create_std__unordered_map_std__string__std__string_(newValue.count)
        for (__k, __v) in newValue {
          bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
        }
        return __map
      }()
    }
  }
  
  var body: ArrayBuffer {
    @inline(__always)
    get {
      return ArrayBuffer(self.__body)
    }
    @inline(__always)
    set {
      self.__body = newValue.getArrayBuffer()
    }
  }
  
  var timestampMs: Double {
    @inline(__always)
    get {
      return self.__timestampMs
    }
    @inline(__always)
    set {
      self.__timestampMs = newValue
    }
  }
}
