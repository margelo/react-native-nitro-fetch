///
/// HybridNitroFetchCacheSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroFetchCacheSpec``
public protocol HybridNitroFetchCacheSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getCachedPrefetch(key: String, maxAgeMs: Double) throws -> CachedPrefetchResponse?
  func isPrefetchPending(key: String) throws -> Bool
  func clearAll() throws -> Void
}

/// See ``HybridNitroFetchCacheSpec``
open class HybridNitroFetchCacheSpec_base {
  private weak var cxxWrapper: HybridNitroFetchCacheSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroFetchCacheSpec_cxx {
  #if DEBUG
    guard self is HybridNitroFetchCacheSpec else {
      fatalError("`self` is not a `HybridNitroFetchCacheSpec`! Did you accidentally inherit from `HybridNitroFetchCacheSpec_base` instead of `HybridNitroFetchCacheSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroFetchCacheSpec_cxx(self as! HybridNitroFetchCacheSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroFetchCache HybridObject.
 * Implement this protocol to create Swift-based instances of NitroFetchCache.
 * ```swift
 * class HybridNitroFetchCache : HybridNitroFetchCacheSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroFetchCacheSpec = HybridNitroFetchCacheSpec_protocol & HybridNitroFetchCacheSpec_base
