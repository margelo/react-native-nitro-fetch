///
/// NitroFetch-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroFetchClientSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridNitroFetchClientSpec; }
// Forward declaration of `HybridNitroFetchSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridNitroFetchSpec; }
// Forward declaration of `NitroHeader` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct NitroHeader; }
// Forward declaration of `NitroRequestMethod` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class NitroRequestMethod; }
// Forward declaration of `NitroResponse` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct NitroResponse; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroFetchClientSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridNitroFetchClientSpec_cxx; }
// Forward declaration of `HybridNitroFetchSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridNitroFetchSpec_cxx; }

// Include C++ defined types
#include "HybridNitroFetchClientSpec.hpp"
#include "HybridNitroFetchSpec.hpp"
#include "NitroHeader.hpp"
#include "NitroRequestMethod.hpp"
#include "NitroResponse.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrofetch::bridge::swift {

  // pragma MARK: std::vector<NitroHeader>
  /**
   * Specialized version of `std::vector<NitroHeader>`.
   */
  using std__vector_NitroHeader_ = std::vector<NitroHeader>;
  inline std::vector<NitroHeader> create_std__vector_NitroHeader_(size_t size) noexcept {
    std::vector<NitroHeader> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) noexcept {
    return std::optional<std::string>(value);
  }
  inline bool has_value_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return optional.has_value();
  }
  inline std::string get_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<Promise<NitroResponse>>
  /**
   * Specialized version of `std::shared_ptr<Promise<NitroResponse>>`.
   */
  using std__shared_ptr_Promise_NitroResponse__ = std::shared_ptr<Promise<NitroResponse>>;
  inline std::shared_ptr<Promise<NitroResponse>> create_std__shared_ptr_Promise_NitroResponse__() noexcept {
    return Promise<NitroResponse>::create();
  }
  inline PromiseHolder<NitroResponse> wrap_std__shared_ptr_Promise_NitroResponse__(std::shared_ptr<Promise<NitroResponse>> promise) noexcept {
    return PromiseHolder<NitroResponse>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const NitroResponse& /* result */)>
  /**
   * Specialized version of `std::function<void(const NitroResponse&)>`.
   */
  using Func_void_NitroResponse = std::function<void(const NitroResponse& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const NitroResponse& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_NitroResponse_Wrapper final {
  public:
    explicit Func_void_NitroResponse_Wrapper(std::function<void(const NitroResponse& /* result */)>&& func): _function(std::make_unique<std::function<void(const NitroResponse& /* result */)>>(std::move(func))) {}
    inline void call(NitroResponse result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const NitroResponse& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_NitroResponse create_Func_void_NitroResponse(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_NitroResponse_Wrapper wrap_Func_void_NitroResponse(Func_void_NitroResponse value) noexcept {
    return Func_void_NitroResponse_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_unique<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const noexcept {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) noexcept {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<NitroRequestMethod>
  /**
   * Specialized version of `std::optional<NitroRequestMethod>`.
   */
  using std__optional_NitroRequestMethod_ = std::optional<NitroRequestMethod>;
  inline std::optional<NitroRequestMethod> create_std__optional_NitroRequestMethod_(const NitroRequestMethod& value) noexcept {
    return std::optional<NitroRequestMethod>(value);
  }
  inline bool has_value_std__optional_NitroRequestMethod_(const std::optional<NitroRequestMethod>& optional) noexcept {
    return optional.has_value();
  }
  inline NitroRequestMethod get_std__optional_NitroRequestMethod_(const std::optional<NitroRequestMethod>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<std::vector<NitroHeader>>
  /**
   * Specialized version of `std::optional<std::vector<NitroHeader>>`.
   */
  using std__optional_std__vector_NitroHeader__ = std::optional<std::vector<NitroHeader>>;
  inline std::optional<std::vector<NitroHeader>> create_std__optional_std__vector_NitroHeader__(const std::vector<NitroHeader>& value) noexcept {
    return std::optional<std::vector<NitroHeader>>(value);
  }
  inline bool has_value_std__optional_std__vector_NitroHeader__(const std::optional<std::vector<NitroHeader>>& optional) noexcept {
    return optional.has_value();
  }
  inline std::vector<NitroHeader> get_std__optional_std__vector_NitroHeader__(const std::optional<std::vector<NitroHeader>>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) noexcept {
    return std::optional<double>(value);
  }
  inline bool has_value_std__optional_double_(const std::optional<double>& optional) noexcept {
    return optional.has_value();
  }
  inline double get_std__optional_double_(const std::optional<double>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::optional<bool>
  /**
   * Specialized version of `std::optional<bool>`.
   */
  using std__optional_bool_ = std::optional<bool>;
  inline std::optional<bool> create_std__optional_bool_(const bool& value) noexcept {
    return std::optional<bool>(value);
  }
  inline bool has_value_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return optional.has_value();
  }
  inline bool get_std__optional_bool_(const std::optional<bool>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<Promise<void>>
  /**
   * Specialized version of `std::shared_ptr<Promise<void>>`.
   */
  using std__shared_ptr_Promise_void__ = std::shared_ptr<Promise<void>>;
  inline std::shared_ptr<Promise<void>> create_std__shared_ptr_Promise_void__() noexcept {
    return Promise<void>::create();
  }
  inline PromiseHolder<void> wrap_std__shared_ptr_Promise_void__(std::shared_ptr<Promise<void>> promise) noexcept {
    return PromiseHolder<void>(std::move(promise));
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_unique<std::function<void()>>(std::move(func))) {}
    inline void call() const noexcept {
      _function->operator()();
    }
  private:
    std::unique_ptr<std::function<void()>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper) noexcept;
  inline Func_void_Wrapper wrap_Func_void(Func_void value) noexcept {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroFetchClientSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroFetchClientSpec>`.
   */
  using std__shared_ptr_HybridNitroFetchClientSpec_ = std::shared_ptr<HybridNitroFetchClientSpec>;
  std::shared_ptr<HybridNitroFetchClientSpec> create_std__shared_ptr_HybridNitroFetchClientSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridNitroFetchClientSpec_(std__shared_ptr_HybridNitroFetchClientSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroFetchClientSpec>
  using std__weak_ptr_HybridNitroFetchClientSpec_ = std::weak_ptr<HybridNitroFetchClientSpec>;
  inline std__weak_ptr_HybridNitroFetchClientSpec_ weakify_std__shared_ptr_HybridNitroFetchClientSpec_(const std::shared_ptr<HybridNitroFetchClientSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<NitroResponse>>>
  using Result_std__shared_ptr_Promise_NitroResponse___ = Result<std::shared_ptr<Promise<NitroResponse>>>;
  inline Result_std__shared_ptr_Promise_NitroResponse___ create_Result_std__shared_ptr_Promise_NitroResponse___(const std::shared_ptr<Promise<NitroResponse>>& value) noexcept {
    return Result<std::shared_ptr<Promise<NitroResponse>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_NitroResponse___ create_Result_std__shared_ptr_Promise_NitroResponse___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<NitroResponse>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<void>>>
  using Result_std__shared_ptr_Promise_void___ = Result<std::shared_ptr<Promise<void>>>;
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::shared_ptr<Promise<void>>& value) noexcept {
    return Result<std::shared_ptr<Promise<void>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<void>>>::withError(error);
  }
  
  // pragma MARK: std::shared_ptr<HybridNitroFetchSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridNitroFetchSpec>`.
   */
  using std__shared_ptr_HybridNitroFetchSpec_ = std::shared_ptr<HybridNitroFetchSpec>;
  std::shared_ptr<HybridNitroFetchSpec> create_std__shared_ptr_HybridNitroFetchSpec_(void* _Nonnull swiftUnsafePointer) noexcept;
  void* _Nonnull get_std__shared_ptr_HybridNitroFetchSpec_(std__shared_ptr_HybridNitroFetchSpec_ cppType) noexcept;
  
  // pragma MARK: std::weak_ptr<HybridNitroFetchSpec>
  using std__weak_ptr_HybridNitroFetchSpec_ = std::weak_ptr<HybridNitroFetchSpec>;
  inline std__weak_ptr_HybridNitroFetchSpec_ weakify_std__shared_ptr_HybridNitroFetchSpec_(const std::shared_ptr<HybridNitroFetchSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<HybridNitroFetchClientSpec>>
  using Result_std__shared_ptr_HybridNitroFetchClientSpec__ = Result<std::shared_ptr<HybridNitroFetchClientSpec>>;
  inline Result_std__shared_ptr_HybridNitroFetchClientSpec__ create_Result_std__shared_ptr_HybridNitroFetchClientSpec__(const std::shared_ptr<HybridNitroFetchClientSpec>& value) noexcept {
    return Result<std::shared_ptr<HybridNitroFetchClientSpec>>::withValue(value);
  }
  inline Result_std__shared_ptr_HybridNitroFetchClientSpec__ create_Result_std__shared_ptr_HybridNitroFetchClientSpec__(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<HybridNitroFetchClientSpec>>::withError(error);
  }

} // namespace margelo::nitro::nitrofetch::bridge::swift
