///
/// UrlRequestCallback.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `UrlResponseInfo` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlResponseInfo; }
// Forward declaration of `HybridRequestExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridRequestExceptionSpec; }

#include "UrlResponseInfo.hpp"
#include <string>
#include <functional>
#include <NitroModules/ArrayBuffer.hpp>
#include <optional>
#include <memory>
#include "HybridRequestExceptionSpec.hpp"

namespace margelo::nitro::nitrofetch {

  /**
   * A struct which can be represented as a JavaScript object (UrlRequestCallback).
   */
  struct UrlRequestCallback {
  public:
    std::function<void(const UrlResponseInfo& /* info */, const std::string& /* newLocationUrl */)> onRedirectReceived     SWIFT_PRIVATE;
    std::function<void(const UrlResponseInfo& /* info */)> onResponseStarted     SWIFT_PRIVATE;
    std::function<void(const UrlResponseInfo& /* info */, const std::shared_ptr<ArrayBuffer>& /* byteBuffer */)> onReadCompleted     SWIFT_PRIVATE;
    std::function<void(const UrlResponseInfo& /* info */)> onSucceeded     SWIFT_PRIVATE;
    std::function<void(const std::optional<UrlResponseInfo>& /* info */, const std::shared_ptr<HybridRequestExceptionSpec>& /* error */)> onFailed     SWIFT_PRIVATE;
    std::function<void(const std::optional<UrlResponseInfo>& /* info */)> onCanceled     SWIFT_PRIVATE;

  public:
    UrlRequestCallback() = default;
    explicit UrlRequestCallback(std::function<void(const UrlResponseInfo& /* info */, const std::string& /* newLocationUrl */)> onRedirectReceived, std::function<void(const UrlResponseInfo& /* info */)> onResponseStarted, std::function<void(const UrlResponseInfo& /* info */, const std::shared_ptr<ArrayBuffer>& /* byteBuffer */)> onReadCompleted, std::function<void(const UrlResponseInfo& /* info */)> onSucceeded, std::function<void(const std::optional<UrlResponseInfo>& /* info */, const std::shared_ptr<HybridRequestExceptionSpec>& /* error */)> onFailed, std::function<void(const std::optional<UrlResponseInfo>& /* info */)> onCanceled): onRedirectReceived(onRedirectReceived), onResponseStarted(onResponseStarted), onReadCompleted(onReadCompleted), onSucceeded(onSucceeded), onFailed(onFailed), onCanceled(onCanceled) {}
  };

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ UrlRequestCallback <> JS UrlRequestCallback (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::UrlRequestCallback> final {
    static inline margelo::nitro::nitrofetch::UrlRequestCallback fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrofetch::UrlRequestCallback(
        JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&, const std::string&)>>::fromJSI(runtime, obj.getProperty(runtime, "onRedirectReceived")),
        JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&)>>::fromJSI(runtime, obj.getProperty(runtime, "onResponseStarted")),
        JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&, const std::shared_ptr<ArrayBuffer>&)>>::fromJSI(runtime, obj.getProperty(runtime, "onReadCompleted")),
        JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&)>>::fromJSI(runtime, obj.getProperty(runtime, "onSucceeded")),
        JSIConverter<std::function<void(const std::optional<margelo::nitro::nitrofetch::UrlResponseInfo>&, const std::shared_ptr<margelo::nitro::nitrofetch::HybridRequestExceptionSpec>&)>>::fromJSI(runtime, obj.getProperty(runtime, "onFailed")),
        JSIConverter<std::function<void(const std::optional<margelo::nitro::nitrofetch::UrlResponseInfo>&)>>::fromJSI(runtime, obj.getProperty(runtime, "onCanceled"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrofetch::UrlRequestCallback& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "onRedirectReceived", JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&, const std::string&)>>::toJSI(runtime, arg.onRedirectReceived));
      obj.setProperty(runtime, "onResponseStarted", JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&)>>::toJSI(runtime, arg.onResponseStarted));
      obj.setProperty(runtime, "onReadCompleted", JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&, const std::shared_ptr<ArrayBuffer>&)>>::toJSI(runtime, arg.onReadCompleted));
      obj.setProperty(runtime, "onSucceeded", JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&)>>::toJSI(runtime, arg.onSucceeded));
      obj.setProperty(runtime, "onFailed", JSIConverter<std::function<void(const std::optional<margelo::nitro::nitrofetch::UrlResponseInfo>&, const std::shared_ptr<margelo::nitro::nitrofetch::HybridRequestExceptionSpec>&)>>::toJSI(runtime, arg.onFailed));
      obj.setProperty(runtime, "onCanceled", JSIConverter<std::function<void(const std::optional<margelo::nitro::nitrofetch::UrlResponseInfo>&)>>::toJSI(runtime, arg.onCanceled));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&, const std::string&)>>::canConvert(runtime, obj.getProperty(runtime, "onRedirectReceived"))) return false;
      if (!JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&)>>::canConvert(runtime, obj.getProperty(runtime, "onResponseStarted"))) return false;
      if (!JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&, const std::shared_ptr<ArrayBuffer>&)>>::canConvert(runtime, obj.getProperty(runtime, "onReadCompleted"))) return false;
      if (!JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UrlResponseInfo&)>>::canConvert(runtime, obj.getProperty(runtime, "onSucceeded"))) return false;
      if (!JSIConverter<std::function<void(const std::optional<margelo::nitro::nitrofetch::UrlResponseInfo>&, const std::shared_ptr<margelo::nitro::nitrofetch::HybridRequestExceptionSpec>&)>>::canConvert(runtime, obj.getProperty(runtime, "onFailed"))) return false;
      if (!JSIConverter<std::function<void(const std::optional<margelo::nitro::nitrofetch::UrlResponseInfo>&)>>::canConvert(runtime, obj.getProperty(runtime, "onCanceled"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
