buildscript {
  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['NitroFetch_' + name]
  }

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.7.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply from: '../nitrogen/generated/android/nitrofetch+autolinking.gradle'

// Do not apply React Gradle plugin in library to avoid RN codegen duplicating app classes

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["NitroFetch_" + name]).toInteger()
}

// Read configuration from package.json
import groovy.json.JsonSlurper

// Default configuration values
def httpCacheEnabled = true
def httpCacheSizeMB = 50
def enableHttp2 = true
def enableQuic = true
def enableBrotli = true
def userAgent = "NitroCronet/1.0"
def storagePath = "nitro_cronet_cache"

// Determine if this is a user app or example app
def isUserApp = rootDir.absolutePath.contains("node_modules")
def packageJsonFile

if (isUserApp) {
  // Start from the root + 1 level up and traverse upwards to find the first package.json
  File currentDir = new File("$rootDir/../")
  packageJsonFile = null

  // Try to find package.json by traversing upwards
  while (currentDir != null) {
    File potential = new File(currentDir, "package.json")
    if (potential.exists()) {
      packageJsonFile = potential
      break
    }
    currentDir = currentDir.parentFile
  }
} else {
  packageJsonFile = new File("$rootDir/../package.json")
}

if (packageJsonFile != null && packageJsonFile.exists()) {
  try {
    def packageJson = new JsonSlurper().parseText(packageJsonFile.text)
    def nitroFetchConfig = packageJson["react-native-nitro-fetch"]

    if (nitroFetchConfig) {
      println "[NITRO-FETCH] Detected react-native-nitro-fetch config from package.json at: " + packageJsonFile.absolutePath

      if (nitroFetchConfig.containsKey("httpCache")) {
        httpCacheEnabled = nitroFetchConfig["httpCache"]
        println "[NITRO-FETCH]   HTTP Cache: " + (httpCacheEnabled ? "enabled ✓" : "disabled")
      }

      if (nitroFetchConfig.containsKey("httpCacheSizeMB")) {
        httpCacheSizeMB = nitroFetchConfig["httpCacheSizeMB"]
        println "[NITRO-FETCH]   HTTP Cache Size: ${httpCacheSizeMB} MB"
      }

      if (nitroFetchConfig.containsKey("enableHttp2")) {
        enableHttp2 = nitroFetchConfig["enableHttp2"]
        println "[NITRO-FETCH]   HTTP/2: " + (enableHttp2 ? "enabled ✓" : "disabled")
      }

      if (nitroFetchConfig.containsKey("enableQuic")) {
        enableQuic = nitroFetchConfig["enableQuic"]
        println "[NITRO-FETCH]   QUIC: " + (enableQuic ? "enabled ✓" : "disabled")
      }

      if (nitroFetchConfig.containsKey("enableBrotli")) {
        enableBrotli = nitroFetchConfig["enableBrotli"]
        println "[NITRO-FETCH]   Brotli: " + (enableBrotli ? "enabled ✓" : "disabled")
      }

      if (nitroFetchConfig.containsKey("userAgent")) {
        userAgent = nitroFetchConfig["userAgent"]
        println "[NITRO-FETCH]   User Agent: ${userAgent}"
      }

      if (nitroFetchConfig.containsKey("storagePath")) {
        storagePath = nitroFetchConfig["storagePath"]
        println "[NITRO-FETCH]   Storage Path: ${storagePath}"
      }
    }
  } catch (Exception e) {
    println "[NITRO-FETCH] Warning: Could not parse package.json: " + e.message
  }
} else {
  println "[NITRO-FETCH] No package.json found, using default configuration"
}

android {
  namespace "com.margelo.nitro.nitrofetch"

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

    buildConfigField "boolean", "HTTP_CACHE_ENABLED", "${httpCacheEnabled}"
    buildConfigField "int", "HTTP_CACHE_SIZE_MB", "${httpCacheSizeMB}"
    buildConfigField "boolean", "ENABLE_HTTP2", "${enableHttp2}"
    buildConfigField "boolean", "ENABLE_QUIC", "${enableQuic}"
    buildConfigField "boolean", "ENABLE_BROTLI", "${enableBrotli}"
    buildConfigField "String", "USER_AGENT", "\"${userAgent}\""
    buildConfigField "String", "STORAGE_PATH", "\"${storagePath}\""

    externalNativeBuild {
      cmake {
        cppFlags "-frtti -fexceptions -Wall -fstack-protector-all"
        arguments "-DANDROID_STL=c++_shared", "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
        abiFilters (*reactNativeArchitectures())
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  packagingOptions {
    excludes = [
            "**/libc++_shared.so",
            "**/libfbjni.so",
            "**/libjsi.so",
            "**/libfolly_json.so",
            "**/libfolly_runtime.so",
            "**/libglog.so",
            "**/libhermes.so",
            "**/libhermes-executor-debug.so",
            "**/libhermes_executor.so",
            "**/libreactnative.so",
            "**/libreactnativejni.so",
            "**/libturbomodulejsijni.so",
            "**/libreact_nativemodule_core.so",
            "**/libjscexecutor.so"
    ]
  }

  buildFeatures {
    buildConfig true
    prefab true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      java.srcDirs += [
        "generated/java",
        "generated/jni"
      ]
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")
// ---------- Cronet (Java API only) ----------
def cronetVersion = (getExtOrDefault("cronetVersion") ?: "119.6045.31")


dependencies {
  implementation "com.facebook.react:react-android"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation project(":react-native-nitro-modules")
  implementation("com.tencent:mmkv:1.3.14")// or latest
  // Provide org.chromium.net Java API for CronetEngine in Kotlin
  // Cronet
  api "org.chromium.net:cronet-embedded:${cronetVersion}"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.9.0"
}

configurations {
  cronetAar
}


// No automatic fetching of Cronet headers/libs; library uses Cronet Java API only.
