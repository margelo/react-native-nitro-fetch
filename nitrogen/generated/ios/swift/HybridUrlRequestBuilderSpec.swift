///
/// HybridUrlRequestBuilderSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules
import NitroModules

/// See ``HybridUrlRequestBuilderSpec``
public protocol HybridUrlRequestBuilderSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func setHttpMethod(httpMethod: String) throws -> Void
  func addHeader(name: String, value: String) throws -> Void
  func setUploadBody(body: Variant_ArrayBuffer_String) throws -> Void
  func disableCache() throws -> Void
  func setPriority(priority: Double) throws -> Void
  func allowDirectExecutor() throws -> Void
  func onSucceeded(callback: @escaping (_ info: UrlResponseInfo) -> Void) throws -> Void
  func onFailed(callback: @escaping (_ info: UrlResponseInfo?, _ error: RequestException) -> Void) throws -> Void
  func onCanceled(callback: @escaping (_ info: UrlResponseInfo?) -> Void) throws -> Void
  func onRedirectReceived(callback: @escaping (_ info: UrlResponseInfo, _ newLocationUrl: String) -> Void) throws -> Void
  func onResponseStarted(callback: @escaping (_ info: UrlResponseInfo) -> Void) throws -> Void
  func onReadCompleted(callback: @escaping (_ info: UrlResponseInfo, _ byteBuffer: ArrayBuffer, _ bytesRead: Double) -> Void) throws -> Void
  func build() throws -> (any HybridUrlRequestSpec)
}

/// See ``HybridUrlRequestBuilderSpec``
open class HybridUrlRequestBuilderSpec_base {
  private weak var cxxWrapper: HybridUrlRequestBuilderSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridUrlRequestBuilderSpec_cxx {
  #if DEBUG
    guard self is HybridUrlRequestBuilderSpec else {
      fatalError("`self` is not a `HybridUrlRequestBuilderSpec`! Did you accidentally inherit from `HybridUrlRequestBuilderSpec_base` instead of `HybridUrlRequestBuilderSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridUrlRequestBuilderSpec_cxx(self as! HybridUrlRequestBuilderSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the UrlRequestBuilder HybridObject.
 * Implement this protocol to create Swift-based instances of UrlRequestBuilder.
 * ```swift
 * class HybridUrlRequestBuilder : HybridUrlRequestBuilderSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridUrlRequestBuilderSpec = HybridUrlRequestBuilderSpec_protocol & HybridUrlRequestBuilderSpec_base
