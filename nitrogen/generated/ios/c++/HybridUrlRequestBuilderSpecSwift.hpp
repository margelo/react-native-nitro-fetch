///
/// HybridUrlRequestBuilderSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridUrlRequestBuilderSpec.hpp"

// Forward declaration of `HybridUrlRequestBuilderSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridUrlRequestBuilderSpec_cxx; }

// Forward declaration of `UploadDataProvider` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UploadDataProvider; }
// Forward declaration of `UploadDataSink` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UploadDataSink; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }
// Forward declaration of `HybridUrlRequestSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestSpec; }

#include <string>
#include "UploadDataProvider.hpp"
#include "UploadDataSink.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <functional>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <variant>
#include <memory>
#include "HybridUrlRequestSpec.hpp"

#include "NitroFetch-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrofetch {

  /**
   * The C++ part of HybridUrlRequestBuilderSpec_cxx.swift.
   *
   * HybridUrlRequestBuilderSpecSwift (C++) accesses HybridUrlRequestBuilderSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridUrlRequestBuilderSpec_cxx can directly inherit from the C++ class HybridUrlRequestBuilderSpec
   * to simplify the whole structure and memory management.
   */
  class HybridUrlRequestBuilderSpecSwift: public virtual HybridUrlRequestBuilderSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridUrlRequestBuilderSpecSwift(const NitroFetch::HybridUrlRequestBuilderSpec_cxx& swiftPart):
      HybridObject(HybridUrlRequestBuilderSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroFetch::HybridUrlRequestBuilderSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void setHttpMethod(const std::string& httpMethod) override {
      auto __result = _swiftPart.setHttpMethod(httpMethod);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void addHeader(const std::string& name, const std::string& value) override {
      auto __result = _swiftPart.addHeader(name, value);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setUploadDataProvider(const UploadDataProvider& provider) override {
      auto __result = _swiftPart.setUploadDataProvider(std::forward<decltype(provider)>(provider));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setUploadBody(const std::variant<std::string, std::shared_ptr<ArrayBuffer>>& body) override {
      auto __result = _swiftPart.setUploadBody(body);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void disableCache() override {
      auto __result = _swiftPart.disableCache();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void setPriority(double priority) override {
      auto __result = _swiftPart.setPriority(std::forward<decltype(priority)>(priority));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void allowDirectExecutor() override {
      auto __result = _swiftPart.allowDirectExecutor();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<HybridUrlRequestSpec> build() override {
      auto __result = _swiftPart.build();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroFetch::HybridUrlRequestBuilderSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrofetch
