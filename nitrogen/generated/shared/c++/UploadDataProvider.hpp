///
/// UploadDataProvider.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `UploadDataSink` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UploadDataSink; }

#include "UploadDataSink.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <functional>

namespace margelo::nitro::nitrofetch {

  /**
   * A struct which can be represented as a JavaScript object (UploadDataProvider).
   */
  struct UploadDataProvider {
  public:
    double length     SWIFT_PRIVATE;
    std::function<void(const UploadDataSink& /* uploadDataSink */, const std::shared_ptr<ArrayBuffer>& /* byteBuffer */)> read     SWIFT_PRIVATE;
    std::function<void(const UploadDataSink& /* uploadDataSink */)> rewind     SWIFT_PRIVATE;

  public:
    UploadDataProvider() = default;
    explicit UploadDataProvider(double length, std::function<void(const UploadDataSink& /* uploadDataSink */, const std::shared_ptr<ArrayBuffer>& /* byteBuffer */)> read, std::function<void(const UploadDataSink& /* uploadDataSink */)> rewind): length(length), read(read), rewind(rewind) {}
  };

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ UploadDataProvider <> JS UploadDataProvider (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::UploadDataProvider> final {
    static inline margelo::nitro::nitrofetch::UploadDataProvider fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrofetch::UploadDataProvider(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "length")),
        JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UploadDataSink&, const std::shared_ptr<ArrayBuffer>&)>>::fromJSI(runtime, obj.getProperty(runtime, "read")),
        JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UploadDataSink&)>>::fromJSI(runtime, obj.getProperty(runtime, "rewind"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrofetch::UploadDataProvider& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "length", JSIConverter<double>::toJSI(runtime, arg.length));
      obj.setProperty(runtime, "read", JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UploadDataSink&, const std::shared_ptr<ArrayBuffer>&)>>::toJSI(runtime, arg.read));
      obj.setProperty(runtime, "rewind", JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UploadDataSink&)>>::toJSI(runtime, arg.rewind));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "length"))) return false;
      if (!JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UploadDataSink&, const std::shared_ptr<ArrayBuffer>&)>>::canConvert(runtime, obj.getProperty(runtime, "read"))) return false;
      if (!JSIConverter<std::function<void(const margelo::nitro::nitrofetch::UploadDataSink&)>>::canConvert(runtime, obj.getProperty(runtime, "rewind"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
