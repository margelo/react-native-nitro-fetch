///
/// JRequestException.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "RequestException.hpp"

#include "ErrorType.hpp"
#include "ExceptionPlatform.hpp"
#include "JErrorType.hpp"
#include "JExceptionPlatform.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "RequestException" and the the Kotlin data class "RequestException".
   */
  struct JRequestException final: public jni::JavaClass<JRequestException> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/RequestException;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct RequestException by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    RequestException toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldPlatform = clazz->getField<JExceptionPlatform>("platform");
      jni::local_ref<JExceptionPlatform> platform = this->getFieldValue(fieldPlatform);
      static const auto fieldMessage = clazz->getField<jni::JString>("message");
      jni::local_ref<jni::JString> message = this->getFieldValue(fieldMessage);
      static const auto fieldCode = clazz->getField<double>("code");
      double code = this->getFieldValue(fieldCode);
      static const auto fieldErrorType = clazz->getField<JErrorType>("errorType");
      jni::local_ref<JErrorType> errorType = this->getFieldValue(fieldErrorType);
      static const auto fieldInternalErrorCode = clazz->getField<jni::JDouble>("internalErrorCode");
      jni::local_ref<jni::JDouble> internalErrorCode = this->getFieldValue(fieldInternalErrorCode);
      static const auto fieldNetworkErrorCode = clazz->getField<jni::JDouble>("networkErrorCode");
      jni::local_ref<jni::JDouble> networkErrorCode = this->getFieldValue(fieldNetworkErrorCode);
      static const auto fieldQuicErrorCode = clazz->getField<jni::JDouble>("quicErrorCode");
      jni::local_ref<jni::JDouble> quicErrorCode = this->getFieldValue(fieldQuicErrorCode);
      static const auto fieldStackTrace = clazz->getField<jni::JString>("stackTrace");
      jni::local_ref<jni::JString> stackTrace = this->getFieldValue(fieldStackTrace);
      static const auto fieldErrorDomain = clazz->getField<jni::JDouble>("errorDomain");
      jni::local_ref<jni::JDouble> errorDomain = this->getFieldValue(fieldErrorDomain);
      static const auto fieldLocalizedDescription = clazz->getField<jni::JString>("localizedDescription");
      jni::local_ref<jni::JString> localizedDescription = this->getFieldValue(fieldLocalizedDescription);
      static const auto fieldUnderlyingError = clazz->getField<jni::JString>("underlyingError");
      jni::local_ref<jni::JString> underlyingError = this->getFieldValue(fieldUnderlyingError);
      static const auto fieldFailingURL = clazz->getField<jni::JString>("failingURL");
      jni::local_ref<jni::JString> failingURL = this->getFieldValue(fieldFailingURL);
      static const auto fieldCauseMessage = clazz->getField<jni::JString>("causeMessage");
      jni::local_ref<jni::JString> causeMessage = this->getFieldValue(fieldCauseMessage);
      return RequestException(
        platform->toCpp(),
        message->toStdString(),
        code,
        errorType->toCpp(),
        internalErrorCode != nullptr ? std::make_optional(internalErrorCode->value()) : std::nullopt,
        networkErrorCode != nullptr ? std::make_optional(networkErrorCode->value()) : std::nullopt,
        quicErrorCode != nullptr ? std::make_optional(quicErrorCode->value()) : std::nullopt,
        stackTrace != nullptr ? std::make_optional(stackTrace->toStdString()) : std::nullopt,
        errorDomain != nullptr ? std::make_optional(errorDomain->value()) : std::nullopt,
        localizedDescription != nullptr ? std::make_optional(localizedDescription->toStdString()) : std::nullopt,
        underlyingError != nullptr ? std::make_optional(underlyingError->toStdString()) : std::nullopt,
        failingURL != nullptr ? std::make_optional(failingURL->toStdString()) : std::nullopt,
        causeMessage != nullptr ? std::make_optional(causeMessage->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JRequestException::javaobject> fromCpp(const RequestException& value) {
      using JSignature = JRequestException(jni::alias_ref<JExceptionPlatform>, jni::alias_ref<jni::JString>, double, jni::alias_ref<JErrorType>, jni::alias_ref<jni::JDouble>, jni::alias_ref<jni::JDouble>, jni::alias_ref<jni::JDouble>, jni::alias_ref<jni::JString>, jni::alias_ref<jni::JDouble>, jni::alias_ref<jni::JString>, jni::alias_ref<jni::JString>, jni::alias_ref<jni::JString>, jni::alias_ref<jni::JString>);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        JExceptionPlatform::fromCpp(value.platform),
        jni::make_jstring(value.message),
        value.code,
        JErrorType::fromCpp(value.errorType),
        value.internalErrorCode.has_value() ? jni::JDouble::valueOf(value.internalErrorCode.value()) : nullptr,
        value.networkErrorCode.has_value() ? jni::JDouble::valueOf(value.networkErrorCode.value()) : nullptr,
        value.quicErrorCode.has_value() ? jni::JDouble::valueOf(value.quicErrorCode.value()) : nullptr,
        value.stackTrace.has_value() ? jni::make_jstring(value.stackTrace.value()) : nullptr,
        value.errorDomain.has_value() ? jni::JDouble::valueOf(value.errorDomain.value()) : nullptr,
        value.localizedDescription.has_value() ? jni::make_jstring(value.localizedDescription.value()) : nullptr,
        value.underlyingError.has_value() ? jni::make_jstring(value.underlyingError.value()) : nullptr,
        value.failingURL.has_value() ? jni::make_jstring(value.failingURL.value()) : nullptr,
        value.causeMessage.has_value() ? jni::make_jstring(value.causeMessage.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
