///
/// HybridCallbackExceptionSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCallbackExceptionSpec``
public protocol HybridCallbackExceptionSpec_protocol: HybridObject, HybridCronetExceptionSpec_protocol {
  // Properties
  var cause: String? { get }

  // Methods
  
}

/// See ``HybridCallbackExceptionSpec``
open class HybridCallbackExceptionSpec_base: HybridCronetExceptionSpec_base {
  private weak var cxxWrapper: HybridCallbackExceptionSpec_cxx? = nil
  public override init() { super.init() }
  public override func getCxxWrapper() -> HybridCallbackExceptionSpec_cxx {
  #if DEBUG
    guard self is HybridCallbackExceptionSpec else {
      fatalError("`self` is not a `HybridCallbackExceptionSpec`! Did you accidentally inherit from `HybridCallbackExceptionSpec_base` instead of `HybridCallbackExceptionSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCallbackExceptionSpec_cxx(self as! HybridCallbackExceptionSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the CallbackException HybridObject.
 * Implement this protocol to create Swift-based instances of CallbackException.
 * ```swift
 * class HybridCallbackException : HybridCallbackExceptionSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCallbackExceptionSpec = HybridCallbackExceptionSpec_protocol & HybridCallbackExceptionSpec_base
