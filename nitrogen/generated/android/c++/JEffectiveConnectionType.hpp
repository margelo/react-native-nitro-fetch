///
/// JEffectiveConnectionType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "EffectiveConnectionType.hpp"

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "EffectiveConnectionType" and the the Kotlin enum "EffectiveConnectionType".
   */
  struct JEffectiveConnectionType final: public jni::JavaClass<JEffectiveConnectionType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/EffectiveConnectionType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum EffectiveConnectionType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    EffectiveConnectionType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<EffectiveConnectionType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JEffectiveConnectionType> fromCpp(EffectiveConnectionType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldUNKNOWN = clazz->getStaticField<JEffectiveConnectionType>("UNKNOWN");
      static const auto fieldOFFLINE = clazz->getStaticField<JEffectiveConnectionType>("OFFLINE");
      static const auto fieldSLOW_2G = clazz->getStaticField<JEffectiveConnectionType>("SLOW_2G");
      static const auto field_2G = clazz->getStaticField<JEffectiveConnectionType>("_2G");
      static const auto field_3G = clazz->getStaticField<JEffectiveConnectionType>("_3G");
      static const auto field_4G = clazz->getStaticField<JEffectiveConnectionType>("_4G");
      static const auto fieldWIFI = clazz->getStaticField<JEffectiveConnectionType>("WIFI");
      
      switch (value) {
        case EffectiveConnectionType::UNKNOWN:
          return clazz->getStaticFieldValue(fieldUNKNOWN);
        case EffectiveConnectionType::OFFLINE:
          return clazz->getStaticFieldValue(fieldOFFLINE);
        case EffectiveConnectionType::SLOW_2G:
          return clazz->getStaticFieldValue(fieldSLOW_2G);
        case EffectiveConnectionType::_2G:
          return clazz->getStaticFieldValue(field_2G);
        case EffectiveConnectionType::_3G:
          return clazz->getStaticFieldValue(field_3G);
        case EffectiveConnectionType::_4G:
          return clazz->getStaticFieldValue(field_4G);
        case EffectiveConnectionType::WIFI:
          return clazz->getStaticFieldValue(fieldWIFI);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrofetch
