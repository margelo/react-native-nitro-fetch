///
/// JHybridNitroFetchCacheSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroFetchCacheSpec.hpp"

// Forward declaration of `CachedPrefetchResponse` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct CachedPrefetchResponse; }

#include "CachedPrefetchResponse.hpp"
#include <optional>
#include "JCachedPrefetchResponse.hpp"
#include <string>
#include <unordered_map>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridNitroFetchCacheSpec::jhybriddata> JHybridNitroFetchCacheSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroFetchCacheSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroFetchCacheSpec::initHybrid),
    });
  }

  size_t JHybridNitroFetchCacheSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroFetchCacheSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::optional<CachedPrefetchResponse> JHybridNitroFetchCacheSpec::getCachedPrefetch(const std::string& key, double maxAgeMs) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JCachedPrefetchResponse>(jni::alias_ref<jni::JString> /* key */, double /* maxAgeMs */)>("getCachedPrefetch");
    auto __result = method(_javaPart, jni::make_jstring(key), maxAgeMs);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  bool JHybridNitroFetchCacheSpec::isPrefetchPending(const std::string& key) {
    static const auto method = javaClassStatic()->getMethod<jboolean(jni::alias_ref<jni::JString> /* key */)>("isPrefetchPending");
    auto __result = method(_javaPart, jni::make_jstring(key));
    return static_cast<bool>(__result);
  }
  void JHybridNitroFetchCacheSpec::clearAll() {
    static const auto method = javaClassStatic()->getMethod<void()>("clearAll");
    method(_javaPart);
  }

} // namespace margelo::nitro::nitrofetch
