///
/// HybridNitroFetchCacheSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroFetchCacheSpec.hpp"

// Forward declaration of `HybridNitroFetchCacheSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridNitroFetchCacheSpec_cxx; }

// Forward declaration of `CachedPrefetchResponse` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct CachedPrefetchResponse; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }

#include "CachedPrefetchResponse.hpp"
#include <optional>
#include <string>
#include <unordered_map>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>

#include "NitroFetch-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrofetch {

  /**
   * The C++ part of HybridNitroFetchCacheSpec_cxx.swift.
   *
   * HybridNitroFetchCacheSpecSwift (C++) accesses HybridNitroFetchCacheSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroFetchCacheSpec_cxx can directly inherit from the C++ class HybridNitroFetchCacheSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroFetchCacheSpecSwift: public virtual HybridNitroFetchCacheSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroFetchCacheSpecSwift(const NitroFetch::HybridNitroFetchCacheSpec_cxx& swiftPart):
      HybridObject(HybridNitroFetchCacheSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroFetch::HybridNitroFetchCacheSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::optional<CachedPrefetchResponse> getCachedPrefetch(const std::string& key, double maxAgeMs) override {
      auto __result = _swiftPart.getCachedPrefetch(key, std::forward<decltype(maxAgeMs)>(maxAgeMs));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline bool isPrefetchPending(const std::string& key) override {
      auto __result = _swiftPart.isPrefetchPending(key);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void clearAll() override {
      auto __result = _swiftPart.clearAll();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroFetch::HybridNitroFetchCacheSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrofetch
