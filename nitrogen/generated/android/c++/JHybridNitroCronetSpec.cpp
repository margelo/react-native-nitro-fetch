///
/// JHybridNitroCronetSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroCronetSpec.hpp"

// Forward declaration of `HybridCronetEngineSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridCronetEngineSpec; }

#include <memory>
#include "HybridCronetEngineSpec.hpp"
#include "JHybridCronetEngineSpec.hpp"

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridNitroCronetSpec::jhybriddata> JHybridNitroCronetSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroCronetSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroCronetSpec::initHybrid),
    });
  }

  size_t JHybridNitroCronetSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroCronetSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<HybridCronetEngineSpec> JHybridNitroCronetSpec::getEngine() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridCronetEngineSpec::javaobject>()>("getEngine");
    auto __result = method(_javaPart);
    return __result->cthis()->shared_cast<JHybridCronetEngineSpec>();
  }
  std::shared_ptr<HybridCronetEngineSpec> JHybridNitroCronetSpec::createEngine() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridCronetEngineSpec::javaobject>()>("createEngine");
    auto __result = method(_javaPart);
    return __result->cthis()->shared_cast<JHybridCronetEngineSpec>();
  }
  void JHybridNitroCronetSpec::shutdownAll() {
    static const auto method = javaClassStatic()->getMethod<void()>("shutdownAll");
    method(_javaPart);
  }

} // namespace margelo::nitro::nitrofetch
