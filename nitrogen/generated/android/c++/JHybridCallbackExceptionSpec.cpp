///
/// JHybridCallbackExceptionSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridCallbackExceptionSpec.hpp"



#include <string>
#include <optional>

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridCallbackExceptionSpec::jhybriddata> JHybridCallbackExceptionSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCallbackExceptionSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCallbackExceptionSpec::initHybrid),
    });
  }

  size_t JHybridCallbackExceptionSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridCallbackExceptionSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  std::optional<std::string> JHybridCallbackExceptionSpec::getCause() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getCause");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  std::string JHybridCallbackExceptionSpec::getMessage() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getMessage");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  double JHybridCallbackExceptionSpec::getInternalErrorCode() {
    static const auto method = javaClassStatic()->getMethod<double()>("getInternalErrorCode");
    auto __result = method(_javaPart);
    return __result;
  }

  // Methods
  

} // namespace margelo::nitro::nitrofetch
