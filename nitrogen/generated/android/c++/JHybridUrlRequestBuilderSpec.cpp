///
/// JHybridUrlRequestBuilderSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridUrlRequestBuilderSpec.hpp"

// Forward declaration of `HybridUrlRequestSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestSpec; }

#include <memory>
#include "HybridUrlRequestSpec.hpp"
#include "JHybridUrlRequestSpec.hpp"
#include <string>

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridUrlRequestBuilderSpec::jhybriddata> JHybridUrlRequestBuilderSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridUrlRequestBuilderSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridUrlRequestBuilderSpec::initHybrid),
    });
  }

  size_t JHybridUrlRequestBuilderSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridUrlRequestBuilderSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridUrlRequestBuilderSpec::setHttpMethod(const std::string& httpMethod) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* httpMethod */)>("setHttpMethod");
    method(_javaPart, jni::make_jstring(httpMethod));
  }
  void JHybridUrlRequestBuilderSpec::addHeader(const std::string& name, const std::string& value) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* name */, jni::alias_ref<jni::JString> /* value */)>("addHeader");
    method(_javaPart, jni::make_jstring(name), jni::make_jstring(value));
  }
  void JHybridUrlRequestBuilderSpec::disableCache() {
    static const auto method = javaClassStatic()->getMethod<void()>("disableCache");
    method(_javaPart);
  }
  void JHybridUrlRequestBuilderSpec::setPriority(double priority) {
    static const auto method = javaClassStatic()->getMethod<void(double /* priority */)>("setPriority");
    method(_javaPart, priority);
  }
  void JHybridUrlRequestBuilderSpec::allowDirectExecutor() {
    static const auto method = javaClassStatic()->getMethod<void()>("allowDirectExecutor");
    method(_javaPart);
  }
  std::shared_ptr<HybridUrlRequestSpec> JHybridUrlRequestBuilderSpec::build() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridUrlRequestSpec::javaobject>()>("build");
    auto __result = method(_javaPart);
    return __result->cthis()->shared_cast<JHybridUrlRequestSpec>();
  }

} // namespace margelo::nitro::nitrofetch
