///
/// JUploadDataSink.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "UploadDataSink.hpp"

#include "JFunc_void.hpp"
#include "JFunc_void_bool.hpp"
#include "JFunc_void_std__string.hpp"
#include <functional>
#include <string>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "UploadDataSink" and the the Kotlin data class "UploadDataSink".
   */
  struct JUploadDataSink final: public jni::JavaClass<JUploadDataSink> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/UploadDataSink;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct UploadDataSink by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    UploadDataSink toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOnReadSucceeded = clazz->getField<JFunc_void_bool::javaobject>("onReadSucceeded");
      jni::local_ref<JFunc_void_bool::javaobject> onReadSucceeded = this->getFieldValue(fieldOnReadSucceeded);
      static const auto fieldOnReadError = clazz->getField<JFunc_void_std__string::javaobject>("onReadError");
      jni::local_ref<JFunc_void_std__string::javaobject> onReadError = this->getFieldValue(fieldOnReadError);
      static const auto fieldOnRewindSucceeded = clazz->getField<JFunc_void::javaobject>("onRewindSucceeded");
      jni::local_ref<JFunc_void::javaobject> onRewindSucceeded = this->getFieldValue(fieldOnRewindSucceeded);
      static const auto fieldOnRewindError = clazz->getField<JFunc_void_std__string::javaobject>("onRewindError");
      jni::local_ref<JFunc_void_std__string::javaobject> onRewindError = this->getFieldValue(fieldOnRewindError);
      return UploadDataSink(
        [&]() -> std::function<void(bool /* finalChunk */)> {
          if (onReadSucceeded->isInstanceOf(JFunc_void_bool_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_bool_cxx::javaobject>(onReadSucceeded);
            return downcast->cthis()->getFunction();
          } else {
            auto onReadSucceededRef = jni::make_global(onReadSucceeded);
            return [onReadSucceededRef](bool finalChunk) -> void {
              return onReadSucceededRef->invoke(finalChunk);
            };
          }
        }(),
        [&]() -> std::function<void(const std::string& /* error */)> {
          if (onReadError->isInstanceOf(JFunc_void_std__string_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__string_cxx::javaobject>(onReadError);
            return downcast->cthis()->getFunction();
          } else {
            auto onReadErrorRef = jni::make_global(onReadError);
            return [onReadErrorRef](std::string error) -> void {
              return onReadErrorRef->invoke(error);
            };
          }
        }(),
        [&]() -> std::function<void()> {
          if (onRewindSucceeded->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(onRewindSucceeded);
            return downcast->cthis()->getFunction();
          } else {
            auto onRewindSucceededRef = jni::make_global(onRewindSucceeded);
            return [onRewindSucceededRef]() -> void {
              return onRewindSucceededRef->invoke();
            };
          }
        }(),
        [&]() -> std::function<void(const std::string& /* error */)> {
          if (onRewindError->isInstanceOf(JFunc_void_std__string_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__string_cxx::javaobject>(onRewindError);
            return downcast->cthis()->getFunction();
          } else {
            auto onRewindErrorRef = jni::make_global(onRewindError);
            return [onRewindErrorRef](std::string error) -> void {
              return onRewindErrorRef->invoke(error);
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JUploadDataSink::javaobject> fromCpp(const UploadDataSink& value) {
      return newInstance(
        JFunc_void_bool_cxx::fromCpp(value.onReadSucceeded),
        JFunc_void_std__string_cxx::fromCpp(value.onReadError),
        JFunc_void_cxx::fromCpp(value.onRewindSucceeded),
        JFunc_void_std__string_cxx::fromCpp(value.onRewindError)
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
