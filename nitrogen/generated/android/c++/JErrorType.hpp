///
/// JErrorType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ErrorType.hpp"

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "ErrorType" and the the Kotlin enum "ErrorType".
   */
  struct JErrorType final: public jni::JavaClass<JErrorType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/ErrorType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum ErrorType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ErrorType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<ErrorType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JErrorType> fromCpp(ErrorType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldNETWORK = clazz->getStaticField<JErrorType>("NETWORK");
      static const auto fieldQUIC = clazz->getStaticField<JErrorType>("QUIC");
      static const auto fieldCALLBACK = clazz->getStaticField<JErrorType>("CALLBACK");
      static const auto fieldSECURITY = clazz->getStaticField<JErrorType>("SECURITY");
      static const auto fieldCRONET = clazz->getStaticField<JErrorType>("CRONET");
      static const auto fieldINLINEEXECUTION = clazz->getStaticField<JErrorType>("INLINEEXECUTION");
      static const auto fieldURLSESSION = clazz->getStaticField<JErrorType>("URLSESSION");
      static const auto fieldOTHER = clazz->getStaticField<JErrorType>("OTHER");
      
      switch (value) {
        case ErrorType::NETWORK:
          return clazz->getStaticFieldValue(fieldNETWORK);
        case ErrorType::QUIC:
          return clazz->getStaticFieldValue(fieldQUIC);
        case ErrorType::CALLBACK:
          return clazz->getStaticFieldValue(fieldCALLBACK);
        case ErrorType::SECURITY:
          return clazz->getStaticFieldValue(fieldSECURITY);
        case ErrorType::CRONET:
          return clazz->getStaticFieldValue(fieldCRONET);
        case ErrorType::INLINEEXECUTION:
          return clazz->getStaticFieldValue(fieldINLINEEXECUTION);
        case ErrorType::URLSESSION:
          return clazz->getStaticFieldValue(fieldURLSESSION);
        case ErrorType::OTHER:
          return clazz->getStaticFieldValue(fieldOTHER);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrofetch
