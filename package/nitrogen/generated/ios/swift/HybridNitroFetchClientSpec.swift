///
/// HybridNitroFetchClientSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroFetchClientSpec``
public protocol HybridNitroFetchClientSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func request(req: NitroRequest) throws -> Promise<NitroResponse>
  func prefetch(req: NitroRequest) throws -> Promise<Void>
}

/// See ``HybridNitroFetchClientSpec``
open class HybridNitroFetchClientSpec_base {
  private weak var cxxWrapper: HybridNitroFetchClientSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroFetchClientSpec_cxx {
  #if DEBUG
    guard self is HybridNitroFetchClientSpec else {
      fatalError("`self` is not a `HybridNitroFetchClientSpec`! Did you accidentally inherit from `HybridNitroFetchClientSpec_base` instead of `HybridNitroFetchClientSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroFetchClientSpec_cxx(self as! HybridNitroFetchClientSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroFetchClient HybridObject.
 * Implement this protocol to create Swift-based instances of NitroFetchClient.
 * ```swift
 * class HybridNitroFetchClient : HybridNitroFetchClientSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroFetchClientSpec = HybridNitroFetchClientSpec_protocol & HybridNitroFetchClientSpec_base
