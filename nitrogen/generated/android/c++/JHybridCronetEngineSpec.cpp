///
/// JHybridCronetEngineSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridCronetEngineSpec.hpp"

// Forward declaration of `HybridUrlRequestBuilderSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestBuilderSpec; }
// Forward declaration of `UrlRequestCallback` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlRequestCallback; }
// Forward declaration of `UrlResponseInfo` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlResponseInfo; }
// Forward declaration of `HttpHeader` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct HttpHeader; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `CronetException` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct CronetException; }

#include <memory>
#include "HybridUrlRequestBuilderSpec.hpp"
#include "JHybridUrlRequestBuilderSpec.hpp"
#include <string>
#include "UrlRequestCallback.hpp"
#include "JUrlRequestCallback.hpp"
#include "UrlResponseInfo.hpp"
#include <functional>
#include "JFunc_void_UrlResponseInfo_std__string.hpp"
#include "JUrlResponseInfo.hpp"
#include <unordered_map>
#include "HttpHeader.hpp"
#include <vector>
#include "JHttpHeader.hpp"
#include "JFunc_void_UrlResponseInfo.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include "JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_.hpp"
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <optional>
#include "CronetException.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo__CronetException.hpp"
#include "JCronetException.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo_.hpp"

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridCronetEngineSpec::jhybriddata> JHybridCronetEngineSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCronetEngineSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCronetEngineSpec::initHybrid),
    });
  }

  size_t JHybridCronetEngineSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridCronetEngineSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<HybridUrlRequestBuilderSpec> JHybridCronetEngineSpec::newUrlRequestBuilder(const std::string& url, const UrlRequestCallback& callback) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridUrlRequestBuilderSpec::javaobject>(jni::alias_ref<jni::JString> /* url */, jni::alias_ref<JUrlRequestCallback> /* callback */)>("newUrlRequestBuilder");
    auto __result = method(_javaPart, jni::make_jstring(url), JUrlRequestCallback::fromCpp(callback));
    return __result->cthis()->shared_cast<JHybridUrlRequestBuilderSpec>();
  }
  void JHybridCronetEngineSpec::shutdown() {
    static const auto method = javaClassStatic()->getMethod<void()>("shutdown");
    method(_javaPart);
  }
  std::string JHybridCronetEngineSpec::getVersionString() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getVersionString");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  void JHybridCronetEngineSpec::startNetLogToFile(const std::string& fileName, bool logAll) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* fileName */, jboolean /* logAll */)>("startNetLogToFile");
    method(_javaPart, jni::make_jstring(fileName), logAll);
  }
  void JHybridCronetEngineSpec::stopNetLog() {
    static const auto method = javaClassStatic()->getMethod<void()>("stopNetLog");
    method(_javaPart);
  }

} // namespace margelo::nitro::nitrofetch
