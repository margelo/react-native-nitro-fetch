///
/// HybridRequestExceptionSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridRequestExceptionSpec.hpp"

// Forward declaration of `HybridRequestExceptionSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridRequestExceptionSpec_cxx; }

// Forward declaration of `ExceptionPlatform` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ExceptionPlatform; }
// Forward declaration of `ErrorType` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ErrorType; }

#include "ExceptionPlatform.hpp"
#include <string>
#include "ErrorType.hpp"
#include <optional>

#include "NitroFetch-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrofetch {

  /**
   * The C++ part of HybridRequestExceptionSpec_cxx.swift.
   *
   * HybridRequestExceptionSpecSwift (C++) accesses HybridRequestExceptionSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridRequestExceptionSpec_cxx can directly inherit from the C++ class HybridRequestExceptionSpec
   * to simplify the whole structure and memory management.
   */
  class HybridRequestExceptionSpecSwift: public virtual HybridRequestExceptionSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridRequestExceptionSpecSwift(const NitroFetch::HybridRequestExceptionSpec_cxx& swiftPart):
      HybridObject(HybridRequestExceptionSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroFetch::HybridRequestExceptionSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline ExceptionPlatform getPlatform() noexcept override {
      auto __result = _swiftPart.getPlatform();
      return static_cast<ExceptionPlatform>(__result);
    }
    inline std::string getMessage() noexcept override {
      auto __result = _swiftPart.getMessage();
      return __result;
    }
    inline double getCode() noexcept override {
      return _swiftPart.getCode();
    }
    inline ErrorType getErrorType() noexcept override {
      auto __result = _swiftPart.getErrorType();
      return static_cast<ErrorType>(__result);
    }
    inline std::optional<double> getInternalErrorCode() noexcept override {
      auto __result = _swiftPart.getInternalErrorCode();
      return __result;
    }
    inline std::optional<double> getNetworkErrorCode() noexcept override {
      auto __result = _swiftPart.getNetworkErrorCode();
      return __result;
    }
    inline std::optional<double> getQuicErrorCode() noexcept override {
      auto __result = _swiftPart.getQuicErrorCode();
      return __result;
    }
    inline std::optional<std::string> getStackTrace() noexcept override {
      auto __result = _swiftPart.getStackTrace();
      return __result;
    }
    inline std::optional<double> getErrorDomain() noexcept override {
      auto __result = _swiftPart.getErrorDomain();
      return __result;
    }
    inline std::optional<std::string> getLocalizedDescription() noexcept override {
      auto __result = _swiftPart.getLocalizedDescription();
      return __result;
    }
    inline std::optional<std::string> getUnderlyingError() noexcept override {
      auto __result = _swiftPart.getUnderlyingError();
      return __result;
    }
    inline std::optional<std::string> getFailingURL() noexcept override {
      auto __result = _swiftPart.getFailingURL();
      return __result;
    }
    inline std::optional<std::string> getCauseMessage() noexcept override {
      auto __result = _swiftPart.getCauseMessage();
      return __result;
    }

  public:
    // Methods
    

  private:
    NitroFetch::HybridRequestExceptionSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrofetch
