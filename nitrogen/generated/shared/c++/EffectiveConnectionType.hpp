///
/// EffectiveConnectionType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitrofetch {

  /**
   * An enum which can be represented as a JavaScript union (EffectiveConnectionType).
   */
  enum class EffectiveConnectionType {
    UNKNOWN      SWIFT_NAME(unknown) = 0,
    OFFLINE      SWIFT_NAME(offline) = 1,
    SLOW_2G      SWIFT_NAME(slow2g) = 2,
    _2G      SWIFT_NAME(2g) = 3,
    _3G      SWIFT_NAME(3g) = 4,
    _4G      SWIFT_NAME(4g) = 5,
    WIFI      SWIFT_NAME(wifi) = 6,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ EffectiveConnectionType <> JS EffectiveConnectionType (union)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::EffectiveConnectionType> final {
    static inline margelo::nitro::nitrofetch::EffectiveConnectionType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("unknown"): return margelo::nitro::nitrofetch::EffectiveConnectionType::UNKNOWN;
        case hashString("offline"): return margelo::nitro::nitrofetch::EffectiveConnectionType::OFFLINE;
        case hashString("slow-2G"): return margelo::nitro::nitrofetch::EffectiveConnectionType::SLOW_2G;
        case hashString("2G"): return margelo::nitro::nitrofetch::EffectiveConnectionType::_2G;
        case hashString("3G"): return margelo::nitro::nitrofetch::EffectiveConnectionType::_3G;
        case hashString("4G"): return margelo::nitro::nitrofetch::EffectiveConnectionType::_4G;
        case hashString("wifi"): return margelo::nitro::nitrofetch::EffectiveConnectionType::WIFI;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum EffectiveConnectionType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::nitrofetch::EffectiveConnectionType arg) {
      switch (arg) {
        case margelo::nitro::nitrofetch::EffectiveConnectionType::UNKNOWN: return JSIConverter<std::string>::toJSI(runtime, "unknown");
        case margelo::nitro::nitrofetch::EffectiveConnectionType::OFFLINE: return JSIConverter<std::string>::toJSI(runtime, "offline");
        case margelo::nitro::nitrofetch::EffectiveConnectionType::SLOW_2G: return JSIConverter<std::string>::toJSI(runtime, "slow-2G");
        case margelo::nitro::nitrofetch::EffectiveConnectionType::_2G: return JSIConverter<std::string>::toJSI(runtime, "2G");
        case margelo::nitro::nitrofetch::EffectiveConnectionType::_3G: return JSIConverter<std::string>::toJSI(runtime, "3G");
        case margelo::nitro::nitrofetch::EffectiveConnectionType::_4G: return JSIConverter<std::string>::toJSI(runtime, "4G");
        case margelo::nitro::nitrofetch::EffectiveConnectionType::WIFI: return JSIConverter<std::string>::toJSI(runtime, "wifi");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert EffectiveConnectionType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("unknown"):
        case hashString("offline"):
        case hashString("slow-2G"):
        case hashString("2G"):
        case hashString("3G"):
        case hashString("4G"):
        case hashString("wifi"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
