///
/// RequestException.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ExceptionPlatform` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ExceptionPlatform; }
// Forward declaration of `ErrorType` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ErrorType; }

#include "ExceptionPlatform.hpp"
#include <string>
#include "ErrorType.hpp"
#include <optional>

namespace margelo::nitro::nitrofetch {

  /**
   * A struct which can be represented as a JavaScript object (RequestException).
   */
  struct RequestException {
  public:
    ExceptionPlatform platform     SWIFT_PRIVATE;
    std::string message     SWIFT_PRIVATE;
    double code     SWIFT_PRIVATE;
    ErrorType errorType     SWIFT_PRIVATE;
    std::optional<double> internalErrorCode     SWIFT_PRIVATE;
    std::optional<double> networkErrorCode     SWIFT_PRIVATE;
    std::optional<double> quicErrorCode     SWIFT_PRIVATE;
    std::optional<std::string> stackTrace     SWIFT_PRIVATE;
    std::optional<double> errorDomain     SWIFT_PRIVATE;
    std::optional<std::string> localizedDescription     SWIFT_PRIVATE;
    std::optional<std::string> underlyingError     SWIFT_PRIVATE;
    std::optional<std::string> failingURL     SWIFT_PRIVATE;
    std::optional<std::string> causeMessage     SWIFT_PRIVATE;

  public:
    RequestException() = default;
    explicit RequestException(ExceptionPlatform platform, std::string message, double code, ErrorType errorType, std::optional<double> internalErrorCode, std::optional<double> networkErrorCode, std::optional<double> quicErrorCode, std::optional<std::string> stackTrace, std::optional<double> errorDomain, std::optional<std::string> localizedDescription, std::optional<std::string> underlyingError, std::optional<std::string> failingURL, std::optional<std::string> causeMessage): platform(platform), message(message), code(code), errorType(errorType), internalErrorCode(internalErrorCode), networkErrorCode(networkErrorCode), quicErrorCode(quicErrorCode), stackTrace(stackTrace), errorDomain(errorDomain), localizedDescription(localizedDescription), underlyingError(underlyingError), failingURL(failingURL), causeMessage(causeMessage) {}
  };

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ RequestException <> JS RequestException (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::RequestException> final {
    static inline margelo::nitro::nitrofetch::RequestException fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrofetch::RequestException(
        JSIConverter<margelo::nitro::nitrofetch::ExceptionPlatform>::fromJSI(runtime, obj.getProperty(runtime, "platform")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "message")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "code")),
        JSIConverter<margelo::nitro::nitrofetch::ErrorType>::fromJSI(runtime, obj.getProperty(runtime, "errorType")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "internalErrorCode")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "networkErrorCode")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "quicErrorCode")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "stackTrace")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "errorDomain")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "localizedDescription")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "underlyingError")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "failingURL")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "causeMessage"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrofetch::RequestException& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "platform", JSIConverter<margelo::nitro::nitrofetch::ExceptionPlatform>::toJSI(runtime, arg.platform));
      obj.setProperty(runtime, "message", JSIConverter<std::string>::toJSI(runtime, arg.message));
      obj.setProperty(runtime, "code", JSIConverter<double>::toJSI(runtime, arg.code));
      obj.setProperty(runtime, "errorType", JSIConverter<margelo::nitro::nitrofetch::ErrorType>::toJSI(runtime, arg.errorType));
      obj.setProperty(runtime, "internalErrorCode", JSIConverter<std::optional<double>>::toJSI(runtime, arg.internalErrorCode));
      obj.setProperty(runtime, "networkErrorCode", JSIConverter<std::optional<double>>::toJSI(runtime, arg.networkErrorCode));
      obj.setProperty(runtime, "quicErrorCode", JSIConverter<std::optional<double>>::toJSI(runtime, arg.quicErrorCode));
      obj.setProperty(runtime, "stackTrace", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.stackTrace));
      obj.setProperty(runtime, "errorDomain", JSIConverter<std::optional<double>>::toJSI(runtime, arg.errorDomain));
      obj.setProperty(runtime, "localizedDescription", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.localizedDescription));
      obj.setProperty(runtime, "underlyingError", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.underlyingError));
      obj.setProperty(runtime, "failingURL", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.failingURL));
      obj.setProperty(runtime, "causeMessage", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.causeMessage));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<margelo::nitro::nitrofetch::ExceptionPlatform>::canConvert(runtime, obj.getProperty(runtime, "platform"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "message"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "code"))) return false;
      if (!JSIConverter<margelo::nitro::nitrofetch::ErrorType>::canConvert(runtime, obj.getProperty(runtime, "errorType"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "internalErrorCode"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "networkErrorCode"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "quicErrorCode"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "stackTrace"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "errorDomain"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "localizedDescription"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "underlyingError"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "failingURL"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "causeMessage"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
