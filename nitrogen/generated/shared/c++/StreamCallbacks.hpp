///
/// StreamCallbacks.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <functional>
#include <string>

namespace margelo::nitro::nitrofetch {

  /**
   * A struct which can be represented as a JavaScript object (StreamCallbacks).
   */
  struct StreamCallbacks {
  public:
    std::function<void(const std::shared_ptr<ArrayBuffer>& /* chunk */)> onData     SWIFT_PRIVATE;
    std::function<void()> onComplete     SWIFT_PRIVATE;
    std::function<void(const std::string& /* error */)> onError     SWIFT_PRIVATE;

  public:
    StreamCallbacks() = default;
    explicit StreamCallbacks(std::function<void(const std::shared_ptr<ArrayBuffer>& /* chunk */)> onData, std::function<void()> onComplete, std::function<void(const std::string& /* error */)> onError): onData(onData), onComplete(onComplete), onError(onError) {}
  };

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ StreamCallbacks <> JS StreamCallbacks (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::StreamCallbacks> final {
    static inline margelo::nitro::nitrofetch::StreamCallbacks fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrofetch::StreamCallbacks(
        JSIConverter<std::function<void(const std::shared_ptr<ArrayBuffer>&)>>::fromJSI(runtime, obj.getProperty(runtime, "onData")),
        JSIConverter<std::function<void()>>::fromJSI(runtime, obj.getProperty(runtime, "onComplete")),
        JSIConverter<std::function<void(const std::string&)>>::fromJSI(runtime, obj.getProperty(runtime, "onError"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrofetch::StreamCallbacks& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "onData", JSIConverter<std::function<void(const std::shared_ptr<ArrayBuffer>&)>>::toJSI(runtime, arg.onData));
      obj.setProperty(runtime, "onComplete", JSIConverter<std::function<void()>>::toJSI(runtime, arg.onComplete));
      obj.setProperty(runtime, "onError", JSIConverter<std::function<void(const std::string&)>>::toJSI(runtime, arg.onError));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::function<void(const std::shared_ptr<ArrayBuffer>&)>>::canConvert(runtime, obj.getProperty(runtime, "onData"))) return false;
      if (!JSIConverter<std::function<void()>>::canConvert(runtime, obj.getProperty(runtime, "onComplete"))) return false;
      if (!JSIConverter<std::function<void(const std::string&)>>::canConvert(runtime, obj.getProperty(runtime, "onError"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
