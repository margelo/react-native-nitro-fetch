///
/// NitroRequest.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroRequest`, backed by a C++ struct.
 */
public typealias NitroRequest = margelo.nitro.nitrofetch.NitroRequest

public extension NitroRequest {
  private typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Create a new instance of `NitroRequest`.
   */
  init(url: String, method: NitroRequestMethod?, headers: [NitroHeader]?, bodyString: String?, bodyBytes: String?, timeoutMs: Double?, followRedirects: Bool?) {
    self.init(std.string(url), { () -> bridge.std__optional_NitroRequestMethod_ in
      if let __unwrappedValue = method {
        return bridge.create_std__optional_NitroRequestMethod_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_NitroHeader__ in
      if let __unwrappedValue = headers {
        return bridge.create_std__optional_std__vector_NitroHeader__({ () -> bridge.std__vector_NitroHeader_ in
          var __vector = bridge.create_std__vector_NitroHeader_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(__item)
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = bodyString {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = bodyBytes {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = timeoutMs {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = followRedirects {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var url: String {
    @inline(__always)
    get {
      return String(self.__url)
    }
    @inline(__always)
    set {
      self.__url = std.string(newValue)
    }
  }
  
  var method: NitroRequestMethod? {
    @inline(__always)
    get {
      return self.__method.value
    }
    @inline(__always)
    set {
      self.__method = { () -> bridge.std__optional_NitroRequestMethod_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroRequestMethod_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var headers: [NitroHeader]? {
    @inline(__always)
    get {
      return { () -> [NitroHeader]? in
        if bridge.has_value_std__optional_std__vector_NitroHeader__(self.__headers) {
          let __unwrapped = bridge.get_std__optional_std__vector_NitroHeader__(self.__headers)
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__headers = { () -> bridge.std__optional_std__vector_NitroHeader__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_NitroHeader__({ () -> bridge.std__vector_NitroHeader_ in
            var __vector = bridge.create_std__vector_NitroHeader_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var bodyString: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__bodyString) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__bodyString)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__bodyString = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var bodyBytes: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__bodyBytes) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__bodyBytes)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__bodyBytes = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var timeoutMs: Double? {
    @inline(__always)
    get {
      return self.__timeoutMs.value
    }
    @inline(__always)
    set {
      self.__timeoutMs = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var followRedirects: Bool? {
    @inline(__always)
    get {
      return self.__followRedirects.value
    }
    @inline(__always)
    set {
      self.__followRedirects = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
