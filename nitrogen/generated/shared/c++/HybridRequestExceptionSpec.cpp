///
/// HybridRequestExceptionSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridRequestExceptionSpec.hpp"

namespace margelo::nitro::nitrofetch {

  void HybridRequestExceptionSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("platform", &HybridRequestExceptionSpec::getPlatform);
      prototype.registerHybridGetter("message", &HybridRequestExceptionSpec::getMessage);
      prototype.registerHybridGetter("code", &HybridRequestExceptionSpec::getCode);
      prototype.registerHybridGetter("errorType", &HybridRequestExceptionSpec::getErrorType);
      prototype.registerHybridGetter("internalErrorCode", &HybridRequestExceptionSpec::getInternalErrorCode);
      prototype.registerHybridGetter("networkErrorCode", &HybridRequestExceptionSpec::getNetworkErrorCode);
      prototype.registerHybridGetter("quicErrorCode", &HybridRequestExceptionSpec::getQuicErrorCode);
      prototype.registerHybridGetter("stackTrace", &HybridRequestExceptionSpec::getStackTrace);
      prototype.registerHybridGetter("errorDomain", &HybridRequestExceptionSpec::getErrorDomain);
      prototype.registerHybridGetter("localizedDescription", &HybridRequestExceptionSpec::getLocalizedDescription);
      prototype.registerHybridGetter("underlyingError", &HybridRequestExceptionSpec::getUnderlyingError);
      prototype.registerHybridGetter("failingURL", &HybridRequestExceptionSpec::getFailingURL);
      prototype.registerHybridGetter("causeMessage", &HybridRequestExceptionSpec::getCauseMessage);
    });
  }

} // namespace margelo::nitro::nitrofetch
