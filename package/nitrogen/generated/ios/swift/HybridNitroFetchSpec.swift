///
/// HybridNitroFetchSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroFetchSpec``
public protocol HybridNitroFetchSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func createClient() throws -> (any HybridNitroFetchClientSpec)
}

/// See ``HybridNitroFetchSpec``
open class HybridNitroFetchSpec_base {
  private weak var cxxWrapper: HybridNitroFetchSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroFetchSpec_cxx {
  #if DEBUG
    guard self is HybridNitroFetchSpec else {
      fatalError("`self` is not a `HybridNitroFetchSpec`! Did you accidentally inherit from `HybridNitroFetchSpec_base` instead of `HybridNitroFetchSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroFetchSpec_cxx(self as! HybridNitroFetchSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroFetch HybridObject.
 * Implement this protocol to create Swift-based instances of NitroFetch.
 * ```swift
 * class HybridNitroFetch : HybridNitroFetchSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroFetchSpec = HybridNitroFetchSpec_protocol & HybridNitroFetchSpec_base
