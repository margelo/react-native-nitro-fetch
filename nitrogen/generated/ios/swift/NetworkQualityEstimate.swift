///
/// NetworkQualityEstimate.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NetworkQualityEstimate`, backed by a C++ struct.
 */
public typealias NetworkQualityEstimate = margelo.nitro.nitrofetch.NetworkQualityEstimate

public extension NetworkQualityEstimate {
  private typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Create a new instance of `NetworkQualityEstimate`.
   */
  init(downstreamThroughputKbps: Double?, upstreamThroughputKbps: Double?, httpRttMs: Double?, transportRttMs: Double?, effectiveConnectionType: EffectiveConnectionType?) {
    self.init({ () -> bridge.std__optional_double_ in
      if let __unwrappedValue = downstreamThroughputKbps {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = upstreamThroughputKbps {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = httpRttMs {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = transportRttMs {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_EffectiveConnectionType_ in
      if let __unwrappedValue = effectiveConnectionType {
        return bridge.create_std__optional_EffectiveConnectionType_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var downstreamThroughputKbps: Double? {
    @inline(__always)
    get {
      return self.__downstreamThroughputKbps.value
    }
    @inline(__always)
    set {
      self.__downstreamThroughputKbps = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var upstreamThroughputKbps: Double? {
    @inline(__always)
    get {
      return self.__upstreamThroughputKbps.value
    }
    @inline(__always)
    set {
      self.__upstreamThroughputKbps = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var httpRttMs: Double? {
    @inline(__always)
    get {
      return self.__httpRttMs.value
    }
    @inline(__always)
    set {
      self.__httpRttMs = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var transportRttMs: Double? {
    @inline(__always)
    get {
      return self.__transportRttMs.value
    }
    @inline(__always)
    set {
      self.__transportRttMs = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var effectiveConnectionType: EffectiveConnectionType? {
    @inline(__always)
    get {
      return self.__effectiveConnectionType.value
    }
    @inline(__always)
    set {
      self.__effectiveConnectionType = { () -> bridge.std__optional_EffectiveConnectionType_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_EffectiveConnectionType_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
