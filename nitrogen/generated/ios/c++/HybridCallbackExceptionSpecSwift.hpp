///
/// HybridCallbackExceptionSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridCallbackExceptionSpec.hpp"

// Forward declaration of `HybridCallbackExceptionSpec_cxx` to properly resolve imports.
namespace NitroFetch { class HybridCallbackExceptionSpec_cxx; }

// Forward declaration of `HybridCronetExceptionSpecSwift` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridCronetExceptionSpecSwift; }

#include <string>
#include <optional>
#include "HybridCronetExceptionSpecSwift.hpp"

#include "NitroFetch-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrofetch {

  /**
   * The C++ part of HybridCallbackExceptionSpec_cxx.swift.
   *
   * HybridCallbackExceptionSpecSwift (C++) accesses HybridCallbackExceptionSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridCallbackExceptionSpec_cxx can directly inherit from the C++ class HybridCallbackExceptionSpec
   * to simplify the whole structure and memory management.
   */
  class HybridCallbackExceptionSpecSwift: public virtual HybridCallbackExceptionSpec, public virtual HybridCronetExceptionSpecSwift {
  public:
    // Constructor from a Swift instance
    explicit HybridCallbackExceptionSpecSwift(const NitroFetch::HybridCallbackExceptionSpec_cxx& swiftPart):
      HybridObject(HybridCallbackExceptionSpec::TAG),
      HybridCronetExceptionSpecSwift(swiftPart),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroFetch::HybridCallbackExceptionSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline std::optional<std::string> getCause() noexcept override {
      auto __result = _swiftPart.getCause();
      return __result;
    }

  public:
    // Methods
    

  private:
    NitroFetch::HybridCallbackExceptionSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrofetch
