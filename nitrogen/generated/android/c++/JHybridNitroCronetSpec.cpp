///
/// JHybridNitroCronetSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroCronetSpec.hpp"

// Forward declaration of `HybridUrlRequestBuilderSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridUrlRequestBuilderSpec; }
// Forward declaration of `CachedFetchResponse` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct CachedFetchResponse; }
// Forward declaration of `UrlRequestCallback` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlRequestCallback; }
// Forward declaration of `UrlResponseInfo` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct UrlResponseInfo; }
// Forward declaration of `HttpHeader` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct HttpHeader; }
// Forward declaration of `HybridRequestExceptionSpec` to properly resolve imports.
namespace margelo::nitro::nitrofetch { class HybridRequestExceptionSpec; }

#include <memory>
#include "HybridUrlRequestBuilderSpec.hpp"
#include "JHybridUrlRequestBuilderSpec.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "CachedFetchResponse.hpp"
#include <optional>
#include "JCachedFetchResponse.hpp"
#include <string>
#include <unordered_map>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include "UrlRequestCallback.hpp"
#include "JUrlRequestCallback.hpp"
#include "UrlResponseInfo.hpp"
#include <functional>
#include "JFunc_void_UrlResponseInfo_std__string.hpp"
#include "JUrlResponseInfo.hpp"
#include "HttpHeader.hpp"
#include <vector>
#include "JHttpHeader.hpp"
#include "JFunc_void_UrlResponseInfo.hpp"
#include "JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_.hpp"
#include "HybridRequestExceptionSpec.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec_.hpp"
#include "JHybridRequestExceptionSpec.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo_.hpp"
#include <variant>
#include "JVariant_ArrayBuffer_String.hpp"

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridNitroCronetSpec::jhybriddata> JHybridNitroCronetSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroCronetSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroCronetSpec::initHybrid),
    });
  }

  size_t JHybridNitroCronetSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroCronetSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<HybridUrlRequestBuilderSpec> JHybridNitroCronetSpec::newUrlRequestBuilder(const std::string& url, const UrlRequestCallback& callback) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridUrlRequestBuilderSpec::javaobject>(jni::alias_ref<jni::JString> /* url */, jni::alias_ref<JUrlRequestCallback> /* callback */)>("newUrlRequestBuilder");
    auto __result = method(_javaPart, jni::make_jstring(url), JUrlRequestCallback::fromCpp(callback));
    return __result->cthis()->shared_cast<JHybridUrlRequestBuilderSpec>();
  }
  std::shared_ptr<Promise<void>> JHybridNitroCronetSpec::prefetch(const std::string& url, const std::string& httpMethod, const std::unordered_map<std::string, std::string>& headers, const std::optional<std::variant<std::shared_ptr<ArrayBuffer>, std::string>>& body, double maxAge) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* url */, jni::alias_ref<jni::JString> /* httpMethod */, jni::alias_ref<jni::JMap<jni::JString, jni::JString>> /* headers */, jni::alias_ref<JVariant_ArrayBuffer_String> /* body */, double /* maxAge */)>("prefetch");
    auto __result = method(_javaPart, jni::make_jstring(url), jni::make_jstring(httpMethod), [&]() -> jni::local_ref<jni::JMap<jni::JString, jni::JString>> {
      auto __map = jni::JHashMap<jni::JString, jni::JString>::create(headers.size());
      for (const auto& __entry : headers) {
        __map->put(jni::make_jstring(__entry.first), jni::make_jstring(__entry.second));
      }
      return __map;
    }(), body.has_value() ? JVariant_ArrayBuffer_String::fromCpp(body.value()) : nullptr, maxAge);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<CachedFetchResponse>>> JHybridNitroCronetSpec::consumeNativePrefetch(const std::string& prefetchKey) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* prefetchKey */)>("consumeNativePrefetch");
    auto __result = method(_javaPart, jni::make_jstring(prefetchKey));
    return [&]() {
      auto __promise = Promise<std::optional<CachedFetchResponse>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JCachedFetchResponse>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrofetch
