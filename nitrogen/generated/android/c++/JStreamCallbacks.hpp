///
/// JStreamCallbacks.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "StreamCallbacks.hpp"

#include "JFunc_void.hpp"
#include "JFunc_void_std__shared_ptr_ArrayBuffer_.hpp"
#include "JFunc_void_std__string.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <functional>
#include <string>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "StreamCallbacks" and the the Kotlin data class "StreamCallbacks".
   */
  struct JStreamCallbacks final: public jni::JavaClass<JStreamCallbacks> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/StreamCallbacks;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct StreamCallbacks by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    StreamCallbacks toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOnData = clazz->getField<JFunc_void_std__shared_ptr_ArrayBuffer_::javaobject>("onData");
      jni::local_ref<JFunc_void_std__shared_ptr_ArrayBuffer_::javaobject> onData = this->getFieldValue(fieldOnData);
      static const auto fieldOnComplete = clazz->getField<JFunc_void::javaobject>("onComplete");
      jni::local_ref<JFunc_void::javaobject> onComplete = this->getFieldValue(fieldOnComplete);
      static const auto fieldOnError = clazz->getField<JFunc_void_std__string::javaobject>("onError");
      jni::local_ref<JFunc_void_std__string::javaobject> onError = this->getFieldValue(fieldOnError);
      return StreamCallbacks(
        [&]() -> std::function<void(const std::shared_ptr<ArrayBuffer>& /* chunk */)> {
          if (onData->isInstanceOf(JFunc_void_std__shared_ptr_ArrayBuffer__cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__shared_ptr_ArrayBuffer__cxx::javaobject>(onData);
            return downcast->cthis()->getFunction();
          } else {
            auto onDataRef = jni::make_global(onData);
            return [onDataRef](std::shared_ptr<ArrayBuffer> chunk) -> void {
              return onDataRef->invoke(chunk);
            };
          }
        }(),
        [&]() -> std::function<void()> {
          if (onComplete->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(onComplete);
            return downcast->cthis()->getFunction();
          } else {
            auto onCompleteRef = jni::make_global(onComplete);
            return [onCompleteRef]() -> void {
              return onCompleteRef->invoke();
            };
          }
        }(),
        [&]() -> std::function<void(const std::string& /* error */)> {
          if (onError->isInstanceOf(JFunc_void_std__string_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__string_cxx::javaobject>(onError);
            return downcast->cthis()->getFunction();
          } else {
            auto onErrorRef = jni::make_global(onError);
            return [onErrorRef](std::string error) -> void {
              return onErrorRef->invoke(error);
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JStreamCallbacks::javaobject> fromCpp(const StreamCallbacks& value) {
      return newInstance(
        JFunc_void_std__shared_ptr_ArrayBuffer__cxx::fromCpp(value.onData),
        JFunc_void_cxx::fromCpp(value.onComplete),
        JFunc_void_std__string_cxx::fromCpp(value.onError)
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
