///
/// HybridRequestExceptionSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ExceptionPlatform` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ExceptionPlatform; }
// Forward declaration of `ErrorType` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ErrorType; }

#include "ExceptionPlatform.hpp"
#include <string>
#include "ErrorType.hpp"
#include <optional>

namespace margelo::nitro::nitrofetch {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `RequestException`
   * Inherit this class to create instances of `HybridRequestExceptionSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridRequestException: public HybridRequestExceptionSpec {
   * public:
   *   HybridRequestException(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridRequestExceptionSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridRequestExceptionSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridRequestExceptionSpec() override = default;

    public:
      // Properties
      virtual ExceptionPlatform getPlatform() = 0;
      virtual std::string getMessage() = 0;
      virtual double getCode() = 0;
      virtual ErrorType getErrorType() = 0;
      virtual std::optional<double> getInternalErrorCode() = 0;
      virtual std::optional<double> getNetworkErrorCode() = 0;
      virtual std::optional<double> getQuicErrorCode() = 0;
      virtual std::optional<std::string> getStackTrace() = 0;
      virtual std::optional<double> getErrorDomain() = 0;
      virtual std::optional<std::string> getLocalizedDescription() = 0;
      virtual std::optional<std::string> getUnderlyingError() = 0;
      virtual std::optional<std::string> getFailingURL() = 0;
      virtual std::optional<std::string> getCauseMessage() = 0;

    public:
      // Methods
      

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "RequestException";
  };

} // namespace margelo::nitro::nitrofetch
