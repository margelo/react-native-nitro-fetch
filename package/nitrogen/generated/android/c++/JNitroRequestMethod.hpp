///
/// JNitroRequestMethod.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroRequestMethod.hpp"

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "NitroRequestMethod" and the the Kotlin enum "NitroRequestMethod".
   */
  struct JNitroRequestMethod final: public jni::JavaClass<JNitroRequestMethod> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/NitroRequestMethod;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum NitroRequestMethod.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroRequestMethod toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<NitroRequestMethod>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JNitroRequestMethod> fromCpp(NitroRequestMethod value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldGET = clazz->getStaticField<JNitroRequestMethod>("GET");
      static const auto fieldHEAD = clazz->getStaticField<JNitroRequestMethod>("HEAD");
      static const auto fieldPOST = clazz->getStaticField<JNitroRequestMethod>("POST");
      static const auto fieldPUT = clazz->getStaticField<JNitroRequestMethod>("PUT");
      static const auto fieldPATCH = clazz->getStaticField<JNitroRequestMethod>("PATCH");
      static const auto fieldDELETE = clazz->getStaticField<JNitroRequestMethod>("DELETE");
      static const auto fieldOPTIONS = clazz->getStaticField<JNitroRequestMethod>("OPTIONS");
      
      switch (value) {
        case NitroRequestMethod::GET:
          return clazz->getStaticFieldValue(fieldGET);
        case NitroRequestMethod::HEAD:
          return clazz->getStaticFieldValue(fieldHEAD);
        case NitroRequestMethod::POST:
          return clazz->getStaticFieldValue(fieldPOST);
        case NitroRequestMethod::PUT:
          return clazz->getStaticFieldValue(fieldPUT);
        case NitroRequestMethod::PATCH:
          return clazz->getStaticFieldValue(fieldPATCH);
        case NitroRequestMethod::DELETE:
          return clazz->getStaticFieldValue(fieldDELETE);
        case NitroRequestMethod::OPTIONS:
          return clazz->getStaticFieldValue(fieldOPTIONS);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nitrofetch
