///
/// NitroResponse.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroResponse`, backed by a C++ struct.
 */
public typealias NitroResponse = margelo.nitro.nitrofetch.NitroResponse

public extension NitroResponse {
  private typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Create a new instance of `NitroResponse`.
   */
  init(url: String, status: Double, statusText: String, ok: Bool, redirected: Bool, headers: [NitroHeader], bodyString: String?, bodyBytes: String?) {
    self.init(std.string(url), status, std.string(statusText), ok, redirected, { () -> bridge.std__vector_NitroHeader_ in
      var __vector = bridge.create_std__vector_NitroHeader_(headers.count)
      for __item in headers {
        __vector.push_back(__item)
      }
      return __vector
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = bodyString {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = bodyBytes {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var url: String {
    @inline(__always)
    get {
      return String(self.__url)
    }
    @inline(__always)
    set {
      self.__url = std.string(newValue)
    }
  }
  
  var status: Double {
    @inline(__always)
    get {
      return self.__status
    }
    @inline(__always)
    set {
      self.__status = newValue
    }
  }
  
  var statusText: String {
    @inline(__always)
    get {
      return String(self.__statusText)
    }
    @inline(__always)
    set {
      self.__statusText = std.string(newValue)
    }
  }
  
  var ok: Bool {
    @inline(__always)
    get {
      return self.__ok
    }
    @inline(__always)
    set {
      self.__ok = newValue
    }
  }
  
  var redirected: Bool {
    @inline(__always)
    get {
      return self.__redirected
    }
    @inline(__always)
    set {
      self.__redirected = newValue
    }
  }
  
  var headers: [NitroHeader] {
    @inline(__always)
    get {
      return self.__headers.map({ __item in __item })
    }
    @inline(__always)
    set {
      self.__headers = { () -> bridge.std__vector_NitroHeader_ in
        var __vector = bridge.create_std__vector_NitroHeader_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
  
  var bodyString: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__bodyString) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__bodyString)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__bodyString = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var bodyBytes: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__bodyBytes) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__bodyBytes)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__bodyBytes = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
