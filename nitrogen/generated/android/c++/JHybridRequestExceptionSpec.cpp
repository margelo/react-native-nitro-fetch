///
/// JHybridRequestExceptionSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridRequestExceptionSpec.hpp"

// Forward declaration of `ExceptionPlatform` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ExceptionPlatform; }
// Forward declaration of `ErrorType` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class ErrorType; }

#include "ExceptionPlatform.hpp"
#include "JExceptionPlatform.hpp"
#include <string>
#include "ErrorType.hpp"
#include "JErrorType.hpp"
#include <optional>

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridRequestExceptionSpec::jhybriddata> JHybridRequestExceptionSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridRequestExceptionSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridRequestExceptionSpec::initHybrid),
    });
  }

  size_t JHybridRequestExceptionSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridRequestExceptionSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  ExceptionPlatform JHybridRequestExceptionSpec::getPlatform() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JExceptionPlatform>()>("getPlatform");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  std::string JHybridRequestExceptionSpec::getMessage() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getMessage");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  double JHybridRequestExceptionSpec::getCode() {
    static const auto method = javaClassStatic()->getMethod<double()>("getCode");
    auto __result = method(_javaPart);
    return __result;
  }
  ErrorType JHybridRequestExceptionSpec::getErrorType() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JErrorType>()>("getErrorType");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  std::optional<double> JHybridRequestExceptionSpec::getInternalErrorCode() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JDouble>()>("getInternalErrorCode");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->value()) : std::nullopt;
  }
  std::optional<double> JHybridRequestExceptionSpec::getNetworkErrorCode() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JDouble>()>("getNetworkErrorCode");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->value()) : std::nullopt;
  }
  std::optional<double> JHybridRequestExceptionSpec::getQuicErrorCode() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JDouble>()>("getQuicErrorCode");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->value()) : std::nullopt;
  }
  std::optional<std::string> JHybridRequestExceptionSpec::getStackTrace() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getStackTrace");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  std::optional<double> JHybridRequestExceptionSpec::getErrorDomain() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JDouble>()>("getErrorDomain");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->value()) : std::nullopt;
  }
  std::optional<std::string> JHybridRequestExceptionSpec::getLocalizedDescription() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getLocalizedDescription");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  std::optional<std::string> JHybridRequestExceptionSpec::getUnderlyingError() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getUnderlyingError");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  std::optional<std::string> JHybridRequestExceptionSpec::getFailingURL() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getFailingURL");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  std::optional<std::string> JHybridRequestExceptionSpec::getCauseMessage() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getCauseMessage");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }

  // Methods
  

} // namespace margelo::nitro::nitrofetch
