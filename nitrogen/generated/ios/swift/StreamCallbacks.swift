///
/// StreamCallbacks.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `StreamCallbacks`, backed by a C++ struct.
 */
public typealias StreamCallbacks = margelo.nitro.nitrofetch.StreamCallbacks

public extension StreamCallbacks {
  private typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Create a new instance of `StreamCallbacks`.
   */
  init(onData: @escaping (_ chunk: ArrayBuffer) -> Void, onComplete: @escaping () -> Void, onError: @escaping (_ error: String) -> Void) {
    self.init({ () -> bridge.Func_void_std__shared_ptr_ArrayBuffer_ in
      let __closureWrapper = Func_void_std__shared_ptr_ArrayBuffer_(onData)
      return bridge.create_Func_void_std__shared_ptr_ArrayBuffer_(__closureWrapper.toUnsafe())
    }(), { () -> bridge.Func_void in
      let __closureWrapper = Func_void(onComplete)
      return bridge.create_Func_void(__closureWrapper.toUnsafe())
    }(), { () -> bridge.Func_void_std__string in
      let __closureWrapper = Func_void_std__string(onError)
      return bridge.create_Func_void_std__string(__closureWrapper.toUnsafe())
    }())
  }

  var onData: (_ chunk: ArrayBuffer) -> Void {
    @inline(__always)
    get {
      return { () -> (ArrayBuffer) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__shared_ptr_ArrayBuffer_(self.__onData)
        return { (__chunk: ArrayBuffer) -> Void in
          __wrappedFunction.call(__chunk)
        }
      }()
    }
    @inline(__always)
    set {
      self.__onData = { () -> bridge.Func_void_std__shared_ptr_ArrayBuffer_ in
        let __closureWrapper = Func_void_std__shared_ptr_ArrayBuffer_(newValue)
        return bridge.create_Func_void_std__shared_ptr_ArrayBuffer_(__closureWrapper.toUnsafe())
      }()
    }
  }
  
  var onComplete: () -> Void {
    @inline(__always)
    get {
      return { () -> () -> Void in
        let __wrappedFunction = bridge.wrap_Func_void(self.__onComplete)
        return { () -> Void in
          __wrappedFunction.call()
        }
      }()
    }
    @inline(__always)
    set {
      self.__onComplete = { () -> bridge.Func_void in
        let __closureWrapper = Func_void(newValue)
        return bridge.create_Func_void(__closureWrapper.toUnsafe())
      }()
    }
  }
  
  var onError: (_ error: String) -> Void {
    @inline(__always)
    get {
      return { () -> (String) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__string(self.__onError)
        return { (__error: String) -> Void in
          __wrappedFunction.call(std.string(__error))
        }
      }()
    }
    @inline(__always)
    set {
      self.__onError = { () -> bridge.Func_void_std__string in
        let __closureWrapper = Func_void_std__string(newValue)
        return bridge.create_Func_void_std__string(__closureWrapper.toUnsafe())
      }()
    }
  }
}
