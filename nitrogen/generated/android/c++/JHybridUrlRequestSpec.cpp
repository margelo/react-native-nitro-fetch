///
/// JHybridUrlRequestSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridUrlRequestSpec.hpp"





namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridUrlRequestSpec::jhybriddata> JHybridUrlRequestSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridUrlRequestSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridUrlRequestSpec::initHybrid),
    });
  }

  size_t JHybridUrlRequestSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridUrlRequestSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridUrlRequestSpec::start() {
    static const auto method = javaClassStatic()->getMethod<void()>("start");
    method(_javaPart);
  }
  void JHybridUrlRequestSpec::followRedirect() {
    static const auto method = javaClassStatic()->getMethod<void()>("followRedirect");
    method(_javaPart);
  }
  void JHybridUrlRequestSpec::read() {
    static const auto method = javaClassStatic()->getMethod<void()>("read");
    method(_javaPart);
  }
  void JHybridUrlRequestSpec::cancel() {
    static const auto method = javaClassStatic()->getMethod<void()>("cancel");
    method(_javaPart);
  }
  bool JHybridUrlRequestSpec::isDone() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("isDone");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }

} // namespace margelo::nitro::nitrofetch
