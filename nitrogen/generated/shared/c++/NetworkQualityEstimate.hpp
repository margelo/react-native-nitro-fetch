///
/// NetworkQualityEstimate.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `EffectiveConnectionType` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class EffectiveConnectionType; }

#include <optional>
#include "EffectiveConnectionType.hpp"

namespace margelo::nitro::nitrofetch {

  /**
   * A struct which can be represented as a JavaScript object (NetworkQualityEstimate).
   */
  struct NetworkQualityEstimate {
  public:
    std::optional<double> downstreamThroughputKbps     SWIFT_PRIVATE;
    std::optional<double> upstreamThroughputKbps     SWIFT_PRIVATE;
    std::optional<double> httpRttMs     SWIFT_PRIVATE;
    std::optional<double> transportRttMs     SWIFT_PRIVATE;
    std::optional<EffectiveConnectionType> effectiveConnectionType     SWIFT_PRIVATE;

  public:
    NetworkQualityEstimate() = default;
    explicit NetworkQualityEstimate(std::optional<double> downstreamThroughputKbps, std::optional<double> upstreamThroughputKbps, std::optional<double> httpRttMs, std::optional<double> transportRttMs, std::optional<EffectiveConnectionType> effectiveConnectionType): downstreamThroughputKbps(downstreamThroughputKbps), upstreamThroughputKbps(upstreamThroughputKbps), httpRttMs(httpRttMs), transportRttMs(transportRttMs), effectiveConnectionType(effectiveConnectionType) {}
  };

} // namespace margelo::nitro::nitrofetch

namespace margelo::nitro {

  // C++ NetworkQualityEstimate <> JS NetworkQualityEstimate (object)
  template <>
  struct JSIConverter<margelo::nitro::nitrofetch::NetworkQualityEstimate> final {
    static inline margelo::nitro::nitrofetch::NetworkQualityEstimate fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitrofetch::NetworkQualityEstimate(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "downstreamThroughputKbps")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "upstreamThroughputKbps")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "httpRttMs")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "transportRttMs")),
        JSIConverter<std::optional<margelo::nitro::nitrofetch::EffectiveConnectionType>>::fromJSI(runtime, obj.getProperty(runtime, "effectiveConnectionType"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitrofetch::NetworkQualityEstimate& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "downstreamThroughputKbps", JSIConverter<std::optional<double>>::toJSI(runtime, arg.downstreamThroughputKbps));
      obj.setProperty(runtime, "upstreamThroughputKbps", JSIConverter<std::optional<double>>::toJSI(runtime, arg.upstreamThroughputKbps));
      obj.setProperty(runtime, "httpRttMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.httpRttMs));
      obj.setProperty(runtime, "transportRttMs", JSIConverter<std::optional<double>>::toJSI(runtime, arg.transportRttMs));
      obj.setProperty(runtime, "effectiveConnectionType", JSIConverter<std::optional<margelo::nitro::nitrofetch::EffectiveConnectionType>>::toJSI(runtime, arg.effectiveConnectionType));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "downstreamThroughputKbps"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "upstreamThroughputKbps"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "httpRttMs"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "transportRttMs"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::nitrofetch::EffectiveConnectionType>>::canConvert(runtime, obj.getProperty(runtime, "effectiveConnectionType"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
