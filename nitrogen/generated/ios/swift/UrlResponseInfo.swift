///
/// UrlResponseInfo.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `UrlResponseInfo`, backed by a C++ struct.
 */
public typealias UrlResponseInfo = margelo.nitro.nitrofetch.UrlResponseInfo

public extension UrlResponseInfo {
  private typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Create a new instance of `UrlResponseInfo`.
   */
  init(url: String, httpStatusCode: Double, httpStatusText: String, allHeaders: Dictionary<String, String>, allHeadersAsList: [HttpHeader], urlChain: [String], negotiatedProtocol: String, proxyServer: String, receivedByteCount: Double, wasCached: Bool) {
    self.init(std.string(url), httpStatusCode, std.string(httpStatusText), { () -> bridge.std__unordered_map_std__string__std__string_ in
      var __map = bridge.create_std__unordered_map_std__string__std__string_(allHeaders.count)
      for (__k, __v) in allHeaders {
        bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
      }
      return __map
    }(), { () -> bridge.std__vector_HttpHeader_ in
      var __vector = bridge.create_std__vector_HttpHeader_(allHeadersAsList.count)
      for __item in allHeadersAsList {
        __vector.push_back(__item)
      }
      return __vector
    }(), { () -> bridge.std__vector_std__string_ in
      var __vector = bridge.create_std__vector_std__string_(urlChain.count)
      for __item in urlChain {
        __vector.push_back(std.string(__item))
      }
      return __vector
    }(), std.string(negotiatedProtocol), std.string(proxyServer), receivedByteCount, wasCached)
  }

  var url: String {
    @inline(__always)
    get {
      return String(self.__url)
    }
    @inline(__always)
    set {
      self.__url = std.string(newValue)
    }
  }
  
  var httpStatusCode: Double {
    @inline(__always)
    get {
      return self.__httpStatusCode
    }
    @inline(__always)
    set {
      self.__httpStatusCode = newValue
    }
  }
  
  var httpStatusText: String {
    @inline(__always)
    get {
      return String(self.__httpStatusText)
    }
    @inline(__always)
    set {
      self.__httpStatusText = std.string(newValue)
    }
  }
  
  var allHeaders: Dictionary<String, String> {
    @inline(__always)
    get {
      return { () -> Dictionary<String, String> in
        var __dictionary = Dictionary<String, String>(minimumCapacity: self.__allHeaders.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__string__keys(self.__allHeaders)
        for __key in __keys {
          let __value = bridge.get_std__unordered_map_std__string__std__string__value(self.__allHeaders, __key)
          __dictionary[String(__key)] = String(__value)
        }
        return __dictionary
      }()
    }
    @inline(__always)
    set {
      self.__allHeaders = { () -> bridge.std__unordered_map_std__string__std__string_ in
        var __map = bridge.create_std__unordered_map_std__string__std__string_(newValue.count)
        for (__k, __v) in newValue {
          bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
        }
        return __map
      }()
    }
  }
  
  var allHeadersAsList: [HttpHeader] {
    @inline(__always)
    get {
      return self.__allHeadersAsList.map({ __item in __item })
    }
    @inline(__always)
    set {
      self.__allHeadersAsList = { () -> bridge.std__vector_HttpHeader_ in
        var __vector = bridge.create_std__vector_HttpHeader_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
  
  var urlChain: [String] {
    @inline(__always)
    get {
      return self.__urlChain.map({ __item in String(__item) })
    }
    @inline(__always)
    set {
      self.__urlChain = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(newValue.count)
        for __item in newValue {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
    }
  }
  
  var negotiatedProtocol: String {
    @inline(__always)
    get {
      return String(self.__negotiatedProtocol)
    }
    @inline(__always)
    set {
      self.__negotiatedProtocol = std.string(newValue)
    }
  }
  
  var proxyServer: String {
    @inline(__always)
    get {
      return String(self.__proxyServer)
    }
    @inline(__always)
    set {
      self.__proxyServer = std.string(newValue)
    }
  }
  
  var receivedByteCount: Double {
    @inline(__always)
    get {
      return self.__receivedByteCount
    }
    @inline(__always)
    set {
      self.__receivedByteCount = newValue
    }
  }
  
  var wasCached: Bool {
    @inline(__always)
    get {
      return self.__wasCached
    }
    @inline(__always)
    set {
      self.__wasCached = newValue
    }
  }
}
