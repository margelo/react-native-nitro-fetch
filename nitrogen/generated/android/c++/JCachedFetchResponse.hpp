///
/// JCachedFetchResponse.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "CachedFetchResponse.hpp"

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <string>
#include <unordered_map>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "CachedFetchResponse" and the the Kotlin data class "CachedFetchResponse".
   */
  struct JCachedFetchResponse final: public jni::JavaClass<JCachedFetchResponse> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/CachedFetchResponse;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct CachedFetchResponse by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    CachedFetchResponse toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldUrl = clazz->getField<jni::JString>("url");
      jni::local_ref<jni::JString> url = this->getFieldValue(fieldUrl);
      static const auto fieldStatus = clazz->getField<double>("status");
      double status = this->getFieldValue(fieldStatus);
      static const auto fieldStatusText = clazz->getField<jni::JString>("statusText");
      jni::local_ref<jni::JString> statusText = this->getFieldValue(fieldStatusText);
      static const auto fieldHeaders = clazz->getField<jni::JMap<jni::JString, jni::JString>>("headers");
      jni::local_ref<jni::JMap<jni::JString, jni::JString>> headers = this->getFieldValue(fieldHeaders);
      static const auto fieldBody = clazz->getField<JArrayBuffer::javaobject>("body");
      jni::local_ref<JArrayBuffer::javaobject> body = this->getFieldValue(fieldBody);
      return CachedFetchResponse(
        url->toStdString(),
        status,
        statusText->toStdString(),
        [&]() {
          std::unordered_map<std::string, std::string> __map;
          __map.reserve(headers->size());
          for (const auto& __entry : *headers) {
            __map.emplace(__entry.first->toStdString(), __entry.second->toStdString());
          }
          return __map;
        }(),
        body->cthis()->getArrayBuffer()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JCachedFetchResponse::javaobject> fromCpp(const CachedFetchResponse& value) {
      using JSignature = JCachedFetchResponse(jni::alias_ref<jni::JString>, double, jni::alias_ref<jni::JString>, jni::alias_ref<jni::JMap<jni::JString, jni::JString>>, jni::alias_ref<JArrayBuffer::javaobject>);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        jni::make_jstring(value.url),
        value.status,
        jni::make_jstring(value.statusText),
        [&]() -> jni::local_ref<jni::JMap<jni::JString, jni::JString>> {
          auto __map = jni::JHashMap<jni::JString, jni::JString>::create(value.headers.size());
          for (const auto& __entry : value.headers) {
            __map->put(jni::make_jstring(__entry.first), jni::make_jstring(__entry.second));
          }
          return __map;
        }(),
        JArrayBuffer::wrap(value.body)
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
