///
/// JUploadDataProvider.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "UploadDataProvider.hpp"

#include "JFunc_void.hpp"
#include "JFunc_void_UploadDataSink.hpp"
#include "JFunc_void_UploadDataSink_std__shared_ptr_ArrayBuffer_.hpp"
#include "JFunc_void_bool.hpp"
#include "JFunc_void_std__string.hpp"
#include "JUploadDataSink.hpp"
#include "UploadDataSink.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <functional>
#include <string>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "UploadDataProvider" and the the Kotlin data class "UploadDataProvider".
   */
  struct JUploadDataProvider final: public jni::JavaClass<JUploadDataProvider> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/UploadDataProvider;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct UploadDataProvider by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    UploadDataProvider toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldLength = clazz->getField<double>("length");
      double length = this->getFieldValue(fieldLength);
      static const auto fieldRead = clazz->getField<JFunc_void_UploadDataSink_std__shared_ptr_ArrayBuffer_::javaobject>("read");
      jni::local_ref<JFunc_void_UploadDataSink_std__shared_ptr_ArrayBuffer_::javaobject> read = this->getFieldValue(fieldRead);
      static const auto fieldRewind = clazz->getField<JFunc_void_UploadDataSink::javaobject>("rewind");
      jni::local_ref<JFunc_void_UploadDataSink::javaobject> rewind = this->getFieldValue(fieldRewind);
      return UploadDataProvider(
        length,
        [&]() -> std::function<void(const UploadDataSink& /* uploadDataSink */, const std::shared_ptr<ArrayBuffer>& /* byteBuffer */)> {
          if (read->isInstanceOf(JFunc_void_UploadDataSink_std__shared_ptr_ArrayBuffer__cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_UploadDataSink_std__shared_ptr_ArrayBuffer__cxx::javaobject>(read);
            return downcast->cthis()->getFunction();
          } else {
            auto readRef = jni::make_global(read);
            return [readRef](UploadDataSink uploadDataSink, std::shared_ptr<ArrayBuffer> byteBuffer) -> void {
              return readRef->invoke(uploadDataSink,byteBuffer);
            };
          }
        }(),
        [&]() -> std::function<void(const UploadDataSink& /* uploadDataSink */)> {
          if (rewind->isInstanceOf(JFunc_void_UploadDataSink_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_UploadDataSink_cxx::javaobject>(rewind);
            return downcast->cthis()->getFunction();
          } else {
            auto rewindRef = jni::make_global(rewind);
            return [rewindRef](UploadDataSink uploadDataSink) -> void {
              return rewindRef->invoke(uploadDataSink);
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JUploadDataProvider::javaobject> fromCpp(const UploadDataProvider& value) {
      using JSignature = JUploadDataProvider(double, jni::alias_ref<JFunc_void_UploadDataSink_std__shared_ptr_ArrayBuffer_::javaobject>, jni::alias_ref<JFunc_void_UploadDataSink::javaobject>);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        value.length,
        JFunc_void_UploadDataSink_std__shared_ptr_ArrayBuffer__cxx::fromCpp(value.read),
        JFunc_void_UploadDataSink_cxx::fromCpp(value.rewind)
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
