///
/// HybridUrlRequestBuilderSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.nitrofetch

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.ArrayBuffer
import com.margelo.nitro.core.HybridObject

/**
 * A Kotlin class representing the UrlRequestBuilder HybridObject.
 * Implement this abstract class to create Kotlin-based instances of UrlRequestBuilder.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridUrlRequestBuilderSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun setHttpMethod(httpMethod: String): Unit
  
  @DoNotStrip
  @Keep
  abstract fun addHeader(name: String, value: String): Unit
  
  @DoNotStrip
  @Keep
  abstract fun setUploadBody(body: Variant_ArrayBuffer_String): Unit
  
  @DoNotStrip
  @Keep
  abstract fun disableCache(): Unit
  
  @DoNotStrip
  @Keep
  abstract fun setPriority(priority: Double): Unit
  
  @DoNotStrip
  @Keep
  abstract fun allowDirectExecutor(): Unit
  
  abstract fun onSucceeded(callback: (info: UrlResponseInfo) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun onSucceeded_cxx(callback: Func_void_UrlResponseInfo): Unit {
    val __result = onSucceeded(callback)
    return __result
  }
  
  abstract fun onFailed(callback: (info: UrlResponseInfo?, error: RequestException) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun onFailed_cxx(callback: Func_void_std__optional_UrlResponseInfo__RequestException): Unit {
    val __result = onFailed(callback)
    return __result
  }
  
  abstract fun onCanceled(callback: (info: UrlResponseInfo?) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun onCanceled_cxx(callback: Func_void_std__optional_UrlResponseInfo_): Unit {
    val __result = onCanceled(callback)
    return __result
  }
  
  abstract fun onRedirectReceived(callback: (info: UrlResponseInfo, newLocationUrl: String) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun onRedirectReceived_cxx(callback: Func_void_UrlResponseInfo_std__string): Unit {
    val __result = onRedirectReceived(callback)
    return __result
  }
  
  abstract fun onResponseStarted(callback: (info: UrlResponseInfo) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun onResponseStarted_cxx(callback: Func_void_UrlResponseInfo): Unit {
    val __result = onResponseStarted(callback)
    return __result
  }
  
  abstract fun onReadCompleted(callback: (info: UrlResponseInfo, byteBuffer: ArrayBuffer) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun onReadCompleted_cxx(callback: Func_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_): Unit {
    val __result = onReadCompleted(callback)
    return __result
  }
  
  @DoNotStrip
  @Keep
  abstract fun build(): HybridUrlRequestSpec

  private external fun initHybrid(): HybridData

  companion object {
    protected const val TAG = "HybridUrlRequestBuilderSpec"
  }
}
