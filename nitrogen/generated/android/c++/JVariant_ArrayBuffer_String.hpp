///
/// JVariant_ArrayBuffer_String.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

#include <NitroModules/ArrayBuffer.hpp>
#include <string>
#include <variant>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "Variant_ArrayBuffer_String".
   */
  class JVariant_ArrayBuffer_String: public jni::JavaClass<JVariant_ArrayBuffer_String> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/Variant_ArrayBuffer_String;";

    static jni::local_ref<JVariant_ArrayBuffer_String> create_0(jni::alias_ref<JArrayBuffer::javaobject> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_ArrayBuffer_String(jni::alias_ref<JArrayBuffer::javaobject>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_ArrayBuffer_String> create_1(jni::alias_ref<jni::JString> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_ArrayBuffer_String(jni::alias_ref<jni::JString>)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JVariant_ArrayBuffer_String> fromCpp(const std::variant<std::shared_ptr<ArrayBuffer>, std::string>& variant) {
      switch (variant.index()) {
        case 0: return create_0(JArrayBuffer::wrap(std::get<0>(variant)));
        case 1: return create_1(jni::make_jstring(std::get<1>(variant)));
        default: throw std::invalid_argument("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    [[nodiscard]] std::variant<std::shared_ptr<ArrayBuffer>, std::string> toCpp() const;
  };

  namespace JVariant_ArrayBuffer_String_impl {
    class First: public jni::JavaClass<First, JVariant_ArrayBuffer_String> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/Variant_ArrayBuffer_String$First;";
    
      [[nodiscard]] jni::local_ref<JArrayBuffer::javaobject> getValue() const {
        static const auto field = javaClassStatic()->getField<JArrayBuffer::javaobject>("value");
        return getFieldValue(field);
      }
    };
    
    class Second: public jni::JavaClass<Second, JVariant_ArrayBuffer_String> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/Variant_ArrayBuffer_String$Second;";
    
      [[nodiscard]] jni::local_ref<jni::JString> getValue() const {
        static const auto field = javaClassStatic()->getField<jni::JString>("value");
        return getFieldValue(field);
      }
    };
  } // namespace JVariant_ArrayBuffer_String_impl
} // namespace margelo::nitro::nitrofetch
