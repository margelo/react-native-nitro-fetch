///
/// JNetworkQualityEstimate.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NetworkQualityEstimate.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NetworkQualityEstimate" and the the Kotlin data class "NetworkQualityEstimate".
   */
  struct JNetworkQualityEstimate final: public jni::JavaClass<JNetworkQualityEstimate> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/NetworkQualityEstimate;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NetworkQualityEstimate by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NetworkQualityEstimate toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldDownstreamThroughputKbps = clazz->getField<jni::JDouble>("downstreamThroughputKbps");
      jni::local_ref<jni::JDouble> downstreamThroughputKbps = this->getFieldValue(fieldDownstreamThroughputKbps);
      static const auto fieldUpstreamThroughputKbps = clazz->getField<jni::JDouble>("upstreamThroughputKbps");
      jni::local_ref<jni::JDouble> upstreamThroughputKbps = this->getFieldValue(fieldUpstreamThroughputKbps);
      static const auto fieldHttpRttMs = clazz->getField<jni::JDouble>("httpRttMs");
      jni::local_ref<jni::JDouble> httpRttMs = this->getFieldValue(fieldHttpRttMs);
      static const auto fieldTransportRttMs = clazz->getField<jni::JDouble>("transportRttMs");
      jni::local_ref<jni::JDouble> transportRttMs = this->getFieldValue(fieldTransportRttMs);
      static const auto fieldEffectiveConnectionType = clazz->getField<jni::JString>("effectiveConnectionType");
      jni::local_ref<jni::JString> effectiveConnectionType = this->getFieldValue(fieldEffectiveConnectionType);
      return NetworkQualityEstimate(
        downstreamThroughputKbps != nullptr ? std::make_optional(downstreamThroughputKbps->value()) : std::nullopt,
        upstreamThroughputKbps != nullptr ? std::make_optional(upstreamThroughputKbps->value()) : std::nullopt,
        httpRttMs != nullptr ? std::make_optional(httpRttMs->value()) : std::nullopt,
        transportRttMs != nullptr ? std::make_optional(transportRttMs->value()) : std::nullopt,
        effectiveConnectionType != nullptr ? std::make_optional(effectiveConnectionType->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNetworkQualityEstimate::javaobject> fromCpp(const NetworkQualityEstimate& value) {
      return newInstance(
        value.downstreamThroughputKbps.has_value() ? jni::JDouble::valueOf(value.downstreamThroughputKbps.value()) : nullptr,
        value.upstreamThroughputKbps.has_value() ? jni::JDouble::valueOf(value.upstreamThroughputKbps.value()) : nullptr,
        value.httpRttMs.has_value() ? jni::JDouble::valueOf(value.httpRttMs.value()) : nullptr,
        value.transportRttMs.has_value() ? jni::JDouble::valueOf(value.transportRttMs.value()) : nullptr,
        value.effectiveConnectionType.has_value() ? jni::make_jstring(value.effectiveConnectionType.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
