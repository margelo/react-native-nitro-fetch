///
/// nitrofetchOnLoad.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#ifndef BUILDING_NITROFETCH_WITH_GENERATED_CMAKE_PROJECT
#error nitrofetchOnLoad.cpp is not being built with the autogenerated CMakeLists.txt project. Is a different CMakeLists.txt building this?
#endif

#include "nitrofetchOnLoad.hpp"

#include <jni.h>
#include <fbjni/fbjni.h>
#include <NitroModules/HybridObjectRegistry.hpp>

#include "JHybridUrlRequestSpec.hpp"
#include "JHybridUrlRequestBuilderSpec.hpp"
#include "JFunc_void_UrlResponseInfo.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo__RequestException.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo_.hpp"
#include "JFunc_void_UrlResponseInfo_std__string.hpp"
#include "JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_.hpp"
#include "JHybridNitroCronetSpec.hpp"
#include "JHybridNitroFetchCacheSpec.hpp"
#include <NitroModules/DefaultConstructableObject.hpp>
#include "HybridTextEncoding.hpp"

namespace margelo::nitro::nitrofetch {

int initialize(JavaVM* vm) {
  using namespace margelo::nitro;
  using namespace margelo::nitro::nitrofetch;
  using namespace facebook;

  return facebook::jni::initialize(vm, [] {
    // Register native JNI methods
    margelo::nitro::nitrofetch::JHybridUrlRequestSpec::registerNatives();
    margelo::nitro::nitrofetch::JHybridUrlRequestBuilderSpec::registerNatives();
    margelo::nitro::nitrofetch::JFunc_void_UrlResponseInfo_cxx::registerNatives();
    margelo::nitro::nitrofetch::JFunc_void_std__optional_UrlResponseInfo__RequestException_cxx::registerNatives();
    margelo::nitro::nitrofetch::JFunc_void_std__optional_UrlResponseInfo__cxx::registerNatives();
    margelo::nitro::nitrofetch::JFunc_void_UrlResponseInfo_std__string_cxx::registerNatives();
    margelo::nitro::nitrofetch::JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer__cxx::registerNatives();
    margelo::nitro::nitrofetch::JHybridNitroCronetSpec::registerNatives();
    margelo::nitro::nitrofetch::JHybridNitroFetchCacheSpec::registerNatives();

    // Register Nitro Hybrid Objects
    HybridObjectRegistry::registerHybridObjectConstructor(
      "NitroCronet",
      []() -> std::shared_ptr<HybridObject> {
        static DefaultConstructableObject<JHybridNitroCronetSpec::javaobject> object("com/margelo/nitro/nitrofetch/NitroCronet");
        auto instance = object.create();
        return instance->cthis()->shared();
      }
    );
    HybridObjectRegistry::registerHybridObjectConstructor(
      "NitroTextEncoding",
      []() -> std::shared_ptr<HybridObject> {
        static_assert(std::is_default_constructible_v<HybridTextEncoding>,
                      "The HybridObject \"HybridTextEncoding\" is not default-constructible! "
                      "Create a public constructor that takes zero arguments to be able to autolink this HybridObject.");
        return std::make_shared<HybridTextEncoding>();
      }
    );
  });
}

} // namespace margelo::nitro::nitrofetch
