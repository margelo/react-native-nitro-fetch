///
/// HybridCronetEngineSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCronetEngineSpec``
public protocol HybridCronetEngineSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func newUrlRequestBuilder(url: String, callback: UrlRequestCallback) throws -> (any HybridUrlRequestBuilderSpec)
  func shutdown() throws -> Void
  func getVersionString() throws -> String
  func startNetLogToFile(fileName: String, logAll: Bool) throws -> Void
  func stopNetLog() throws -> Void
}

/// See ``HybridCronetEngineSpec``
open class HybridCronetEngineSpec_base {
  private weak var cxxWrapper: HybridCronetEngineSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridCronetEngineSpec_cxx {
  #if DEBUG
    guard self is HybridCronetEngineSpec else {
      fatalError("`self` is not a `HybridCronetEngineSpec`! Did you accidentally inherit from `HybridCronetEngineSpec_base` instead of `HybridCronetEngineSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCronetEngineSpec_cxx(self as! HybridCronetEngineSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the CronetEngine HybridObject.
 * Implement this protocol to create Swift-based instances of CronetEngine.
 * ```swift
 * class HybridCronetEngine : HybridCronetEngineSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCronetEngineSpec = HybridCronetEngineSpec_protocol & HybridCronetEngineSpec_base
