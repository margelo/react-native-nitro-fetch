///
/// HybridNitroCronetSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules
import NitroModules

/// See ``HybridNitroCronetSpec``
public protocol HybridNitroCronetSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func newUrlRequestBuilder(url: String) throws -> (any HybridUrlRequestBuilderSpec)
  func prefetch(url: String, httpMethod: String, headers: Dictionary<String, String>, body: Variant_ArrayBuffer_String?, maxAge: Double) throws -> Promise<Void>
  func consumeNativePrefetch(prefetchKey: String) throws -> Promise<CachedFetchResponse?>
}

/// See ``HybridNitroCronetSpec``
open class HybridNitroCronetSpec_base {
  private weak var cxxWrapper: HybridNitroCronetSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridNitroCronetSpec_cxx {
  #if DEBUG
    guard self is HybridNitroCronetSpec else {
      fatalError("`self` is not a `HybridNitroCronetSpec`! Did you accidentally inherit from `HybridNitroCronetSpec_base` instead of `HybridNitroCronetSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroCronetSpec_cxx(self as! HybridNitroCronetSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroCronet HybridObject.
 * Implement this protocol to create Swift-based instances of NitroCronet.
 * ```swift
 * class HybridNitroCronet : HybridNitroCronetSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroCronetSpec = HybridNitroCronetSpec_protocol & HybridNitroCronetSpec_base
