///
/// HybridNetworkExceptionSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNetworkExceptionSpec``
public protocol HybridNetworkExceptionSpec_protocol: HybridObject, HybridCronetExceptionSpec_protocol {
  // Properties
  var errorCode: Double { get }

  // Methods
  
}

/// See ``HybridNetworkExceptionSpec``
open class HybridNetworkExceptionSpec_base: HybridCronetExceptionSpec_base {
  private weak var cxxWrapper: HybridNetworkExceptionSpec_cxx? = nil
  public override init() { super.init() }
  public override func getCxxWrapper() -> HybridNetworkExceptionSpec_cxx {
  #if DEBUG
    guard self is HybridNetworkExceptionSpec else {
      fatalError("`self` is not a `HybridNetworkExceptionSpec`! Did you accidentally inherit from `HybridNetworkExceptionSpec_base` instead of `HybridNetworkExceptionSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNetworkExceptionSpec_cxx(self as! HybridNetworkExceptionSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NetworkException HybridObject.
 * Implement this protocol to create Swift-based instances of NetworkException.
 * ```swift
 * class HybridNetworkException : HybridNetworkExceptionSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNetworkExceptionSpec = HybridNetworkExceptionSpec_protocol & HybridNetworkExceptionSpec_base
