///
/// JUrlRequestCallback.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "UrlRequestCallback.hpp"

#include "HttpHeader.hpp"
#include "HybridRequestExceptionSpec.hpp"
#include "JFunc_void_UrlResponseInfo.hpp"
#include "JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_.hpp"
#include "JFunc_void_UrlResponseInfo_std__string.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo_.hpp"
#include "JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec_.hpp"
#include "JHttpHeader.hpp"
#include "JHybridRequestExceptionSpec.hpp"
#include "JUrlResponseInfo.hpp"
#include "UrlResponseInfo.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <unordered_map>
#include <vector>

namespace margelo::nitro::nitrofetch {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "UrlRequestCallback" and the the Kotlin data class "UrlRequestCallback".
   */
  struct JUrlRequestCallback final: public jni::JavaClass<JUrlRequestCallback> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nitrofetch/UrlRequestCallback;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct UrlRequestCallback by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    UrlRequestCallback toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOnRedirectReceived = clazz->getField<JFunc_void_UrlResponseInfo_std__string::javaobject>("onRedirectReceived");
      jni::local_ref<JFunc_void_UrlResponseInfo_std__string::javaobject> onRedirectReceived = this->getFieldValue(fieldOnRedirectReceived);
      static const auto fieldOnResponseStarted = clazz->getField<JFunc_void_UrlResponseInfo::javaobject>("onResponseStarted");
      jni::local_ref<JFunc_void_UrlResponseInfo::javaobject> onResponseStarted = this->getFieldValue(fieldOnResponseStarted);
      static const auto fieldOnReadCompleted = clazz->getField<JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_::javaobject>("onReadCompleted");
      jni::local_ref<JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_::javaobject> onReadCompleted = this->getFieldValue(fieldOnReadCompleted);
      static const auto fieldOnSucceeded = clazz->getField<JFunc_void_UrlResponseInfo::javaobject>("onSucceeded");
      jni::local_ref<JFunc_void_UrlResponseInfo::javaobject> onSucceeded = this->getFieldValue(fieldOnSucceeded);
      static const auto fieldOnFailed = clazz->getField<JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec_::javaobject>("onFailed");
      jni::local_ref<JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec_::javaobject> onFailed = this->getFieldValue(fieldOnFailed);
      static const auto fieldOnCanceled = clazz->getField<JFunc_void_std__optional_UrlResponseInfo_::javaobject>("onCanceled");
      jni::local_ref<JFunc_void_std__optional_UrlResponseInfo_::javaobject> onCanceled = this->getFieldValue(fieldOnCanceled);
      return UrlRequestCallback(
        [&]() -> std::function<void(const UrlResponseInfo& /* info */, const std::string& /* newLocationUrl */)> {
          if (onRedirectReceived->isInstanceOf(JFunc_void_UrlResponseInfo_std__string_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_UrlResponseInfo_std__string_cxx::javaobject>(onRedirectReceived);
            return downcast->cthis()->getFunction();
          } else {
            auto onRedirectReceivedRef = jni::make_global(onRedirectReceived);
            return [onRedirectReceivedRef](UrlResponseInfo info, std::string newLocationUrl) -> void {
              return onRedirectReceivedRef->invoke(info,newLocationUrl);
            };
          }
        }(),
        [&]() -> std::function<void(const UrlResponseInfo& /* info */)> {
          if (onResponseStarted->isInstanceOf(JFunc_void_UrlResponseInfo_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_UrlResponseInfo_cxx::javaobject>(onResponseStarted);
            return downcast->cthis()->getFunction();
          } else {
            auto onResponseStartedRef = jni::make_global(onResponseStarted);
            return [onResponseStartedRef](UrlResponseInfo info) -> void {
              return onResponseStartedRef->invoke(info);
            };
          }
        }(),
        [&]() -> std::function<void(const UrlResponseInfo& /* info */, const std::shared_ptr<ArrayBuffer>& /* byteBuffer */)> {
          if (onReadCompleted->isInstanceOf(JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer__cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer__cxx::javaobject>(onReadCompleted);
            return downcast->cthis()->getFunction();
          } else {
            auto onReadCompletedRef = jni::make_global(onReadCompleted);
            return [onReadCompletedRef](UrlResponseInfo info, std::shared_ptr<ArrayBuffer> byteBuffer) -> void {
              return onReadCompletedRef->invoke(info,byteBuffer);
            };
          }
        }(),
        [&]() -> std::function<void(const UrlResponseInfo& /* info */)> {
          if (onSucceeded->isInstanceOf(JFunc_void_UrlResponseInfo_cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_UrlResponseInfo_cxx::javaobject>(onSucceeded);
            return downcast->cthis()->getFunction();
          } else {
            auto onSucceededRef = jni::make_global(onSucceeded);
            return [onSucceededRef](UrlResponseInfo info) -> void {
              return onSucceededRef->invoke(info);
            };
          }
        }(),
        [&]() -> std::function<void(const std::optional<UrlResponseInfo>& /* info */, const std::shared_ptr<HybridRequestExceptionSpec>& /* error */)> {
          if (onFailed->isInstanceOf(JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec__cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec__cxx::javaobject>(onFailed);
            return downcast->cthis()->getFunction();
          } else {
            auto onFailedRef = jni::make_global(onFailed);
            return [onFailedRef](std::optional<UrlResponseInfo> info, std::shared_ptr<HybridRequestExceptionSpec> error) -> void {
              return onFailedRef->invoke(info,error);
            };
          }
        }(),
        [&]() -> std::function<void(const std::optional<UrlResponseInfo>& /* info */)> {
          if (onCanceled->isInstanceOf(JFunc_void_std__optional_UrlResponseInfo__cxx::javaClassStatic())) [[likely]] {
            auto downcast = jni::static_ref_cast<JFunc_void_std__optional_UrlResponseInfo__cxx::javaobject>(onCanceled);
            return downcast->cthis()->getFunction();
          } else {
            auto onCanceledRef = jni::make_global(onCanceled);
            return [onCanceledRef](std::optional<UrlResponseInfo> info) -> void {
              return onCanceledRef->invoke(info);
            };
          }
        }()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JUrlRequestCallback::javaobject> fromCpp(const UrlRequestCallback& value) {
      using JSignature = JUrlRequestCallback(jni::alias_ref<JFunc_void_UrlResponseInfo_std__string::javaobject>, jni::alias_ref<JFunc_void_UrlResponseInfo::javaobject>, jni::alias_ref<JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer_::javaobject>, jni::alias_ref<JFunc_void_UrlResponseInfo::javaobject>, jni::alias_ref<JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec_::javaobject>, jni::alias_ref<JFunc_void_std__optional_UrlResponseInfo_::javaobject>);
      static const auto clazz = javaClassStatic();
      static const auto create = clazz->getStaticMethod<JSignature>("fromCpp");
      return create(
        clazz,
        JFunc_void_UrlResponseInfo_std__string_cxx::fromCpp(value.onRedirectReceived),
        JFunc_void_UrlResponseInfo_cxx::fromCpp(value.onResponseStarted),
        JFunc_void_UrlResponseInfo_std__shared_ptr_ArrayBuffer__cxx::fromCpp(value.onReadCompleted),
        JFunc_void_UrlResponseInfo_cxx::fromCpp(value.onSucceeded),
        JFunc_void_std__optional_UrlResponseInfo__std__shared_ptr_HybridRequestExceptionSpec__cxx::fromCpp(value.onFailed),
        JFunc_void_std__optional_UrlResponseInfo__cxx::fromCpp(value.onCanceled)
      );
    }
  };

} // namespace margelo::nitro::nitrofetch
