///
/// JHybridNitroFetchClientSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroFetchClientSpec.hpp"

// Forward declaration of `NitroResponse` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct NitroResponse; }
// Forward declaration of `NitroHeader` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct NitroHeader; }
// Forward declaration of `NitroRequest` to properly resolve imports.
namespace margelo::nitro::nitrofetch { struct NitroRequest; }
// Forward declaration of `NitroRequestMethod` to properly resolve imports.
namespace margelo::nitro::nitrofetch { enum class NitroRequestMethod; }

#include "NitroResponse.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "JNitroResponse.hpp"
#include <string>
#include "NitroHeader.hpp"
#include <vector>
#include "JNitroHeader.hpp"
#include <optional>
#include "NitroRequest.hpp"
#include "JNitroRequest.hpp"
#include "NitroRequestMethod.hpp"
#include "JNitroRequestMethod.hpp"

namespace margelo::nitro::nitrofetch {

  jni::local_ref<JHybridNitroFetchClientSpec::jhybriddata> JHybridNitroFetchClientSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroFetchClientSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroFetchClientSpec::initHybrid),
    });
  }

  size_t JHybridNitroFetchClientSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroFetchClientSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<NitroResponse>> JHybridNitroFetchClientSpec::request(const NitroRequest& req) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroRequest> /* req */)>("request");
    auto __result = method(_javaPart, JNitroRequest::fromCpp(req));
    return [&]() {
      auto __promise = Promise<NitroResponse>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JNitroResponse>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridNitroFetchClientSpec::prefetch(const NitroRequest& req) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroRequest> /* req */)>("prefetch");
    auto __result = method(_javaPart, JNitroRequest::fromCpp(req));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrofetch
