///
/// HybridNitroCronetSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules
import NitroModules

/**
 * A class implementation that bridges HybridNitroCronetSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridNitroCronetSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::nitrofetch::bridge::swift`)
   * from `NitroFetch-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Holds an instance of the `HybridNitroCronetSpec` Swift protocol.
   */
  private var __implementation: any HybridNitroCronetSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridNitroCronetSpec_

  /**
   * Create a new `HybridNitroCronetSpec_cxx` that wraps the given `HybridNitroCronetSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridNitroCronetSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridNitroCronetSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridNitroCronetSpec() -> any HybridNitroCronetSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridNitroCronetSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridNitroCronetSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridNitroCronetSpec_cxx {
    return Unmanaged<HybridNitroCronetSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridNitroCronetSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridNitroCronetSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridNitroCronetSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridNitroCronetSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func newUrlRequestBuilder(url: std.string) -> bridge.Result_std__shared_ptr_HybridUrlRequestBuilderSpec__ {
    do {
      let __result = try self.__implementation.newUrlRequestBuilder(url: String(url))
      let __resultCpp = { () -> bridge.std__shared_ptr_HybridUrlRequestBuilderSpec_ in
        let __cxxWrapped = __result.getCxxWrapper()
        return __cxxWrapped.getCxxPart()
      }()
      return bridge.create_Result_std__shared_ptr_HybridUrlRequestBuilderSpec__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_HybridUrlRequestBuilderSpec__(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func prefetch(url: std.string, httpMethod: std.string, headers: bridge.std__unordered_map_std__string__std__string_, body: bridge.std__optional_std__variant_std__shared_ptr_ArrayBuffer___std__string__, maxAge: Double) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.prefetch(url: String(url), httpMethod: String(httpMethod), headers: { () -> Dictionary<String, String> in
        var __dictionary = Dictionary<String, String>(minimumCapacity: headers.size())
        let __keys = bridge.get_std__unordered_map_std__string__std__string__keys(headers)
        for __key in __keys {
          let __value = bridge.get_std__unordered_map_std__string__std__string__value(headers, __key)
          __dictionary[String(__key)] = String(__value)
        }
        return __dictionary
      }(), body: { () -> Variant_ArrayBuffer_String? in
        if bridge.has_value_std__optional_std__variant_std__shared_ptr_ArrayBuffer___std__string__(body) {
          let __unwrapped = bridge.get_std__optional_std__variant_std__shared_ptr_ArrayBuffer___std__string__(body)
          return { () -> Variant_ArrayBuffer_String in
            let __variant = bridge.std__variant_std__shared_ptr_ArrayBuffer___std__string_(__unwrapped)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first(ArrayBuffer(__actual))
              case 1:
                let __actual = __variant.get_1()
                return .second(String(__actual))
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }()
        } else {
          return nil
        }
      }(), maxAge: maxAge)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func consumeNativePrefetch(prefetchKey: std.string) -> bridge.Result_std__shared_ptr_Promise_std__optional_CachedFetchResponse____ {
    do {
      let __result = try self.__implementation.consumeNativePrefetch(prefetchKey: String(prefetchKey))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_CachedFetchResponse___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_CachedFetchResponse___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_CachedFetchResponse___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_CachedFetchResponse_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_CachedFetchResponse_(__unwrappedValue)
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_CachedFetchResponse____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_CachedFetchResponse____(__exceptionPtr)
    }
  }
}
