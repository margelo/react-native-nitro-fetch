///
/// UploadDataProvider.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `UploadDataProvider`, backed by a C++ struct.
 */
public typealias UploadDataProvider = margelo.nitro.nitrofetch.UploadDataProvider

public extension UploadDataProvider {
  private typealias bridge = margelo.nitro.nitrofetch.bridge.swift

  /**
   * Create a new instance of `UploadDataProvider`.
   */
  init(length: Double, read: @escaping (_ uploadDataSink: UploadDataSink, _ byteBuffer: ArrayBuffer) -> Void, rewind: @escaping (_ uploadDataSink: UploadDataSink) -> Void) {
    self.init(length, { () -> bridge.Func_void_UploadDataSink_std__shared_ptr_ArrayBuffer_ in
      let __closureWrapper = Func_void_UploadDataSink_std__shared_ptr_ArrayBuffer_(read)
      return bridge.create_Func_void_UploadDataSink_std__shared_ptr_ArrayBuffer_(__closureWrapper.toUnsafe())
    }(), { () -> bridge.Func_void_UploadDataSink in
      let __closureWrapper = Func_void_UploadDataSink(rewind)
      return bridge.create_Func_void_UploadDataSink(__closureWrapper.toUnsafe())
    }())
  }

  var length: Double {
    @inline(__always)
    get {
      return self.__length
    }
    @inline(__always)
    set {
      self.__length = newValue
    }
  }
  
  var read: (_ uploadDataSink: UploadDataSink, _ byteBuffer: ArrayBuffer) -> Void {
    @inline(__always)
    get {
      return { () -> (UploadDataSink, ArrayBuffer) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_UploadDataSink_std__shared_ptr_ArrayBuffer_(self.__read)
        return { (__uploadDataSink: UploadDataSink, __byteBuffer: ArrayBuffer) -> Void in
          __wrappedFunction.call(__uploadDataSink, __byteBuffer)
        }
      }()
    }
    @inline(__always)
    set {
      self.__read = { () -> bridge.Func_void_UploadDataSink_std__shared_ptr_ArrayBuffer_ in
        let __closureWrapper = Func_void_UploadDataSink_std__shared_ptr_ArrayBuffer_(newValue)
        return bridge.create_Func_void_UploadDataSink_std__shared_ptr_ArrayBuffer_(__closureWrapper.toUnsafe())
      }()
    }
  }
  
  var rewind: (_ uploadDataSink: UploadDataSink) -> Void {
    @inline(__always)
    get {
      return { () -> (UploadDataSink) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_UploadDataSink(self.__rewind)
        return { (__uploadDataSink: UploadDataSink) -> Void in
          __wrappedFunction.call(__uploadDataSink)
        }
      }()
    }
    @inline(__always)
    set {
      self.__rewind = { () -> bridge.Func_void_UploadDataSink in
        let __closureWrapper = Func_void_UploadDataSink(newValue)
        return bridge.create_Func_void_UploadDataSink(__closureWrapper.toUnsafe())
      }()
    }
  }
}
